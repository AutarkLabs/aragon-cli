{"version":3,"sources":["../src/cli.js"],"names":["require","Web3","DEFAULT_GAS_PRICE","aragon","defaultGasPrice","environmentMiddleware","manifestMiddleware","moduleMiddleware","findProjectRoot","ens","ConsoleReporter","url","MIDDLEWARES","cmd","strict","parserConfiguration","usage","commandDir","middleware","alias","scriptName","demandCommand","option","description","coerce","debug","process","env","DEBUG","global","DEBUG_MODE","gasPrice","utils","toWei","_","cwd","warnedDeprecatedNetwork","network","reporter","info","group","apm","ipfs","rpc","uri","URL","protocol","replace","host","hostname","port","parseInt","hash","epilogue","JSON","stringify","argv","fail","msg","err","yargs","error","message","showHelp","stack","exit","parse","slice"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport 'core-js/stable'\nimport 'regenerator-runtime/runtime'\nrequire('source-map-support/register')\nconst Web3 = require('web3')\n\nconst DEFAULT_GAS_PRICE = require('../package.json').aragon.defaultGasPrice\n\nconst {\n  environmentMiddleware,\n  manifestMiddleware,\n  moduleMiddleware,\n} = require('./middleware')\nconst { findProjectRoot } = require('./util')\nconst { ens } = require('@aragon/aragen')\nconst ConsoleReporter = require('@aragon/cli-utils/src/reporters/ConsoleReporter')\nconst url = require('url')\n\nconst MIDDLEWARES = [\n  manifestMiddleware,\n  moduleMiddleware,\n  environmentMiddleware,\n]\n\n// Set up commands\nconst cmd = require('yargs')\n  .strict()\n  .parserConfiguration({\n    'parse-numbers': false,\n  })\n  .usage(`Usage: aragon <command> [options]`)\n  .commandDir('./commands')\n\ncmd.middleware(MIDDLEWARES)\n\ncmd.alias('env', 'environment')\ncmd.alias('h', 'help')\ncmd.alias('v', 'version')\n\n// blank scriptName so that help text doesn't display \"aragon\" before each command\ncmd.scriptName('')\n\n// Configure CLI behaviour\ncmd.demandCommand(1, 'You need to specify a command')\n\n// Set global options\ncmd.option('silent', {\n  description: 'Silence output to terminal',\n  boolean: true,\n  default: false,\n})\n\ncmd.option('debug', {\n  description: 'Show more output to terminal',\n  boolean: true,\n  default: false,\n  coerce: debug => {\n    if (debug || process.env.DEBUG) {\n      global.DEBUG_MODE = true\n      return true\n    }\n  },\n})\n\ncmd.option('gas-price', {\n  description: 'Gas price in Gwei',\n  default: DEFAULT_GAS_PRICE,\n  coerce: gasPrice => {\n    return Web3.utils.toWei(gasPrice, 'gwei')\n  },\n})\n\ncmd.option('cwd', {\n  description: 'The project working directory',\n  default: () => {\n    try {\n      return findProjectRoot()\n    } catch (_) {\n      return process.cwd()\n    }\n  },\n})\n\ncmd.option('use-frame', {\n  description: 'Use frame as a signing provider and web3 provider',\n  boolean: true,\n  default: false,\n})\n\n// network coerce is called multiple times, only warn once\nlet warnedDeprecatedNetwork = false\n\n// Ethereum\ncmd.option('network', {\n  description:\n    '(deprecated) The network in your truffle.js that you want to use. Deprecated in favor of `--environment`',\n  coerce: network => {\n    if (warnedDeprecatedNetwork) {\n      return network\n    }\n    warnedDeprecatedNetwork = true\n    reporter.info(\n      'Use of `--network` is deprecated and has been replaced with `--environment`. You may need to update your arapp.json'\n    )\n  },\n})\n\ncmd.option('environment', {\n  description: 'The environment in your arapp.json that you want to use',\n  // default: 'default'\n})\n\n// APM\ncmd.option('apm.ens-registry', {\n  description:\n    \"Address of the ENS registry. This will be overwritten if the selected '--environment' from your arapp.json includes a `registry` property\",\n  default: ens,\n})\ncmd.group(['apm.ens-registry'], 'APM:')\n\ncmd.option('apm.ipfs.rpc', {\n  description: 'An URI to the IPFS node used to publish files',\n  default: 'http://localhost:5001#default',\n})\ncmd.option('apm.ipfs.gateway', {\n  description: 'An URI to the IPFS Gateway to read files from',\n  default: 'http://localhost:8080/ipfs',\n})\ncmd.group(['apm.ipfs.rpc', 'apm.ipfs.gateway'], 'APM providers:')\n\ncmd.option('apm', {\n  coerce: apm => {\n    if (apm.ipfs && apm.ipfs.rpc) {\n      const uri = new url.URL(apm.ipfs.rpc)\n      apm.ipfs.rpc = {\n        protocol: uri.protocol.replace(':', ''),\n        host: uri.hostname,\n        port: parseInt(uri.port),\n      }\n      if (uri.hash === '#default') {\n        apm.ipfs.rpc.default = true\n      }\n    }\n    return apm\n  },\n})\n\n// Add epilogue\ncmd.epilogue('For more information, check out https://hack.aragon.org')\n\n// Run\nconst reporter = new ConsoleReporter()\nreporter.debug(JSON.stringify(process.argv)) // TODO: this ain't working (DEBUG_MODE not set yet?)\ncmd\n  .fail((msg, err, yargs) => {\n    reporter.error(msg || err.message || 'An error occurred')\n\n    if (!err) {\n      yargs.showHelp()\n    } else if (err.stack) {\n      reporter.debug(err.stack)\n    }\n\n    process.exit(1)\n  })\n  .parse(process.argv.slice(2), {\n    reporter,\n  })\n"],"file":"cli.js"}