{"version":3,"sources":["../../../src/commands/apm_cmds/extract-functions.js"],"names":["path","require","keccak256","writeJson","extract","chalk","exports","command","describe","builder","yargs","positional","description","type","option","handler","cwd","reporter","contract","output","resolve","functions","roleSet","Set","forEach","roles","role","add","roleIds","map","id","bytes","name","params","content","filename","basename","replace","outputPath","spaces","success","blue"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;eACsBA,OAAO,CAAC,SAAD,C;IAArBC,S,YAAAA,S;;gBACcD,OAAO,CAAC,UAAD,C;IAArBE,S,aAAAA,S;;AACR,IAAMC,OAAO,GAAGH,OAAO,CAAC,kCAAD,CAAvB;;AACA,IAAMI,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AAEAK,OAAO,CAACC,OAAR,GAAkB,8BAAlB;AAEAD,OAAO,CAACE,QAAR,GAAmB,mDAAnB;;AAEAF,OAAO,CAACG,OAAR,GAAkB,UAASC,KAAT,EAAgB;AAChC,SAAOA,KAAK,CACTC,UADI,CACO,UADP,EACmB;AACtBC,IAAAA,WAAW,EAAE,qDADS;AAEtBC,IAAAA,IAAI,EAAE;AAFgB,GADnB,EAKJC,MALI,CAKG,QALH,EAKa;AAChBF,IAAAA,WAAW,EACT,8DAFc;AAGhBC,IAAAA,IAAI,EAAE,QAHU;AAIhB,eAAS;AAJO,GALb,CAAP;AAWD,CAZD;;AAcAP,OAAO,CAACS,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,GADgB,QAChBA,GADgB,EAEhBC,QAFgB,QAEhBA,QAFgB,EAIhBC,QAJgB,QAIhBA,QAJgB,EAKhBC,MALgB,QAKhBA,MALgB;AAAA;AAAA,mBASQf,OAAO,CAACJ,IAAI,CAACoB,OAAL,CAAaJ,GAAb,EAAkBE,QAAlB,CAAD,CATf;;AAAA;AASVG,YAAAA,SATU;AAWZC,YAAAA,OAXY,GAWF,IAAIC,GAAJ,EAXE;AAYhBF,YAAAA,SAAS,CAACG,OAAV,CAAkB;AAAA,kBAAGC,KAAH,SAAGA,KAAH;AAAA,qBAAeA,KAAK,CAACD,OAAN,CAAc,UAAAE,IAAI;AAAA,uBAAIJ,OAAO,CAACK,GAAR,CAAYD,IAAZ,CAAJ;AAAA,eAAlB,CAAf;AAAA,aAAlB;AACME,YAAAA,OAbU,sBAaIN,OAbJ;AAeVG,YAAAA,KAfU,GAeFG,OAAO,CAACC,GAAR,CAAY,UAAAC,EAAE;AAAA,qBAAK;AAC/BA,gBAAAA,EAAE,EAAFA,EAD+B;AAE/BC,gBAAAA,KAAK,EAAE,OAAO7B,SAAS,CAAC4B,EAAD,CAFQ;AAG/BE,gBAAAA,IAAI,EAAE,EAHyB;AAGrB;AACVC,gBAAAA,MAAM,EAAE;AAJuB,eAAL;AAAA,aAAd,CAfE;AAsBVC,YAAAA,OAtBU,GAsBA;AACdT,cAAAA,KAAK,EAALA,KADc;AAEdJ,cAAAA,SAAS,EAATA;AAFc,aAtBA;AA2BVc,YAAAA,QA3BU,GA2BCnC,IAAI,CAACoC,QAAL,CAAclB,QAAd,EAAwBmB,OAAxB,CAAgC,MAAhC,EAAwC,OAAxC,CA3BD;AA4BVC,YAAAA,UA5BU,GA4BGtC,IAAI,CAACoB,OAAL,CAAaD,MAAb,EAAqBgB,QAArB,CA5BH;AAAA;AAAA,mBA8BVhC,SAAS,CAACmC,UAAD,EAAaJ,OAAb,EAAsB;AAAEK,cAAAA,MAAM,EAAE;AAAV,aAAtB,CA9BC;;AAAA;AAgChBtB,YAAAA,QAAQ,CAACuB,OAAT,oBAA6BnC,KAAK,CAACoC,IAAN,CAAWH,UAAX,CAA7B;;AAhCgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const path = require('path')\nconst { keccak256 } = require('js-sha3')\nconst { writeJson } = require('fs-extra')\nconst extract = require('../../helpers/solidity-extractor')\nconst chalk = require('chalk')\n\nexports.command = 'extract-functions [contract]'\n\nexports.describe = 'Extract function information from a Solidity file'\n\nexports.builder = function(yargs) {\n  return yargs\n    .positional('contract', {\n      description: 'Path to the Solidity file to extract functions from',\n      type: 'string',\n    })\n    .option('output', {\n      description:\n        'Path of the directory where the output file will be saved to',\n      type: 'string',\n      default: '.',\n    })\n}\n\nexports.handler = async function({\n  cwd,\n  reporter,\n\n  contract,\n  output,\n}) {\n  // Analyse contract functions and returns an array\n  // > [{ sig: 'transfer(address)', role: 'X_ROLE', notice: 'Transfers..'}]\n  const functions = await extract(path.resolve(cwd, contract))\n\n  let roleSet = new Set()\n  functions.forEach(({ roles }) => roles.forEach(role => roleSet.add(role)))\n  const roleIds = [...roleSet]\n\n  const roles = roleIds.map(id => ({\n    id,\n    bytes: '0x' + keccak256(id),\n    name: '', // Name and params can't be extracted from solidity file, must be filled in manually\n    params: [],\n  }))\n\n  const content = {\n    roles,\n    functions,\n  }\n\n  const filename = path.basename(contract).replace('.sol', '.json')\n  const outputPath = path.resolve(output, filename)\n\n  await writeJson(outputPath, content, { spaces: '\\t' })\n\n  reporter.success(`Saved to ${chalk.blue(outputPath)}`)\n}\n"],"file":"extract-functions.js"}