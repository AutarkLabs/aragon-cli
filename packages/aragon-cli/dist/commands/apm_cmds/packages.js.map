{"version":3,"sources":["../../../src/commands/apm_cmds/packages.js"],"names":["APM","require","chalk","Table","TaskList","ensureWeb3","exports","command","describe","builder","yargs","option","description","type","handler","reporter","apmRegistry","network","apmOptions","apm","web3","ensRegistryAddress","tasks","title","task","ctx","getRepoRegistry","registry","getPastEvents","fromBlock","e","names","map","ev","returnValues","name","Promise","all","getLatestVersion","id","versions","run","then","success","rows","info","index","version","table","head","x","white","forEach","r","push","console","log","toString","process","exit"],"mappings":"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","sourcesContent":["const APM = require('@aragon/apm')\nconst chalk = require('chalk')\nconst Table = require('cli-table')\nconst TaskList = require('listr')\nconst { ensureWeb3 } = require('../../helpers/web3-fallback')\n\nexports.command = 'packages [apmRegistry]'\n\nexports.describe = 'List all packages in the registry'\n\nexports.builder = function(yargs) {\n  return yargs.option('apmRegistry', {\n    description: 'The registry to inspect',\n    type: 'string',\n    default: 'aragonpm.eth',\n  })\n}\n\nexports.handler = async function({\n  reporter,\n  apmRegistry,\n  network,\n  apm: apmOptions,\n}) {\n  const web3 = await ensureWeb3(network)\n\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n  const apm = APM(web3, apmOptions)\n\n  const tasks = new TaskList([\n    {\n      title: `Fetching APM Registry: ${apmRegistry}`,\n      task: async (ctx, task) => {\n        // TODO add a new method to APM to allow fetching a registry without appId\n        ctx.registry = await apm.getRepoRegistry(`vault.${apmRegistry}`)\n      },\n    },\n    {\n      title: 'Gathering Repos',\n      task: async (ctx, task) => {\n        const e = await ctx.registry.getPastEvents('NewRepo', { fromBlock: 0 })\n\n        ctx.names = e.map(ev => ev.returnValues.name)\n        ctx.versions = await Promise.all(\n          e.map(async ev => apm.getLatestVersion(ev.returnValues.id))\n        )\n      },\n    },\n  ])\n\n  return tasks.run().then(ctx => {\n    reporter.success('Successfully fetched packages')\n\n    const rows = ctx.versions.map((info, index) => {\n      return [ctx.names[index], info.version]\n    })\n\n    const table = new Table({\n      head: ['App', 'Latest Version'].map(x => chalk.white(x)),\n    })\n\n    rows.forEach(r => table.push(r))\n\n    console.log(table.toString())\n    process.exit()\n  })\n}\n"],"file":"packages.js"}