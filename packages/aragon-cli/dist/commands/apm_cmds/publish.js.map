{"version":3,"sources":["../../../src/commands/apm_cmds/publish.js"],"names":["require","ensureWeb3","tmp","path","readJson","writeJson","pathExistsSync","APM","semver","TaskList","taskInput","inquirer","chalk","findProjectRoot","runScriptTask","ZERO_ADDRESS","compileContracts","web3Utils","deploy","startIPFS","propagateIPFS","execTask","task","listrOpts","prepareFilesForPublishing","MANIFEST_FILE","ARTIFACT_FILE","getMajor","sanityCheck","generateApplicationArtifact","generateFlattenedCode","copyCurrentApplicationArtifacts","SOLIDITY_FILE","POSITIVE_ANSWERS","ANSWERS","exports","command","describe","builder","yargs","positional","description","type","option","array","choices","runSetupTask","reporter","gasPrice","cwd","web3","network","module","apmOptions","apm","silent","debug","prepublish","prepublishScript","build","buildScript","bump","contract","init","reuse","onlyContent","onlyArtifacts","ipfsCheck","http","ensRegistryAddress","title","enabled","ctx","isValid","ipfsTimeout","info","getLatestVersion","appName","initialRepo","initialVersion","version","valid","inc","isValidBump","Error","shouldDeployContract","message","indexOf","validInitialVersions","isAddress","deployTaskParams","output","contractAddress","runPrepareForPublishTask","publishDir","files","ignore","httpServedFrom","provider","deployArtifacts","dir","tmpDir","pathToPublish","projectRoot","manifestOrigin","resolve","manifestDst","manifest","start_url","basename","script","skip","invokeArtifactGeneration","answer","contractPath","roles","existingArtifactPath","existingArtifact","rebuild","validate","value","done","contractInstance","eth","getAccounts","accounts","from","publishVersionIntent","intent","runPublishTask","wsProvider","dao","proxyAddress","methodName","params","getTransactionPath","wrapper","handler","propagateContent","skipConfirmation","run","contentURI","utils","hexToAscii","length","split","contentProvier","contentLocation","normalize","warning","console","log","blue","bold","prompt","name","green","confirmation","process","exit","receipt","transactionPath","transactionHash","status","error","logVersion","cid","propagateTask","CIDs","result","gateways","succeeded","red","failed","join","errors","map","JSON","stringify"],"mappings":"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","sourcesContent":["const { ensureWeb3 } = require('../../helpers/web3-fallback')\nconst tmp = require('tmp-promise')\nconst path = require('path')\nconst { readJson, writeJson, pathExistsSync } = require('fs-extra')\nconst APM = require('@aragon/apm')\nconst semver = require('semver')\nconst TaskList = require('listr')\nconst taskInput = require('listr-input')\nconst inquirer = require('inquirer')\nconst chalk = require('chalk')\nconst { findProjectRoot, runScriptTask, ZERO_ADDRESS } = require('../../util')\nconst { compileContracts } = require('../../helpers/truffle-runner')\nconst web3Utils = require('web3-utils')\nconst deploy = require('../deploy')\nconst startIPFS = require('../ipfs_cmds/start')\nconst propagateIPFS = require('../ipfs_cmds/propagate')\nconst execTask = require('../dao_cmds/utils/execHandler').task\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\n\nconst {\n  prepareFilesForPublishing,\n  MANIFEST_FILE,\n  ARTIFACT_FILE,\n} = require('./util/preprare-files')\n\nconst {\n  getMajor,\n  sanityCheck,\n  generateApplicationArtifact,\n  generateFlattenedCode,\n  copyCurrentApplicationArtifacts,\n  SOLIDITY_FILE,\n  POSITIVE_ANSWERS,\n  ANSWERS,\n} = require('./util/generate-artifact')\n\nexports.command = 'publish <bump> [contract]'\n\nexports.describe = 'Publish a new version of the application'\n\nexports.builder = function(yargs) {\n  return deploy\n    .builder(yargs) // inherit deploy options\n    .positional('bump', {\n      description: 'Type of bump (major, minor or patch) or version number',\n      type: 'string',\n    })\n    .positional('contract', {\n      description:\n        \"The address or name of the contract to publish in this version. If it isn't provided, it will default to the current version's contract.\",\n      type: 'string',\n    })\n    .option('init', {\n      description: 'Arguments to be passed to contract constructor',\n      array: true,\n      default: [],\n    })\n    .option('only-artifacts', {\n      description: 'Whether just generate artifacts file without publishing',\n      default: false,\n      boolean: true,\n    })\n    .option('provider', {\n      description: 'The aragonPM storage provider to publish files to',\n      default: 'ipfs',\n      choices: ['ipfs'],\n    })\n    .option('reuse', {\n      description:\n        'Whether to reuse the previous version contract and skip deployment on non-major versions',\n      default: false,\n      boolean: true,\n    })\n    .option('files', {\n      description:\n        'Path(s) to directories containing files to publish. Specify multiple times to include multiple files.',\n      default: ['.'],\n      array: true,\n    })\n    .option('ignore', {\n      description:\n        'A gitignore pattern of files to ignore. Specify multiple times to add multiple patterns.',\n      array: true,\n      default: ['node_modules'],\n    })\n    .option('ipfs-check', {\n      description: 'Whether to have publish start IPFS if not started',\n      boolean: true,\n      default: true,\n    })\n    .option('publish-dir', {\n      description:\n        'Temporary directory where files will be copied before publishing. Defaults to temp dir.',\n      default: null,\n    })\n    .option('only-content', {\n      description:\n        'Whether to skip contract compilation, deployment and contract artifact generation',\n      default: false,\n      boolean: true,\n    })\n    .option('build', {\n      description:\n        'Whether publish should try to build the app before publishing, running the script specified in --build-script',\n      default: true,\n      boolean: true,\n    })\n    .option('build-script', {\n      description: 'The npm script that will be run when building the app',\n      default: 'build',\n    })\n    .option('prepublish', {\n      description:\n        'Whether publish should run prepublish script specified in --prepublish-script before publishing',\n      default: true,\n      boolean: true,\n    })\n    .option('prepublish-script', {\n      description: 'The npm script that will be run before publishing the app',\n      default: 'prepublishOnly',\n    })\n    .option('http', {\n      description: 'URL for where your app is served e.g. localhost:1234',\n      default: null,\n    })\n    .option('http-served-from', {\n      description:\n        'Directory where your files is being served from e.g. ./dist',\n      default: null,\n    })\n    .option('propagate-content', {\n      description: 'Whether to propagate the content once published',\n      boolean: true,\n      default: true,\n    })\n    .option('skip-confirmation', {\n      description: 'Whether to skip the confirmation step',\n      boolean: true,\n      default: false,\n    })\n}\n\nexports.runSetupTask = ({\n  reporter,\n\n  // Globals\n  gasPrice,\n  cwd,\n  web3,\n  network,\n  module,\n  apm: apmOptions,\n  silent,\n  debug,\n\n  // Arguments\n\n  /// Scritps\n  prepublish,\n  prepublishScript,\n  build,\n  buildScript,\n\n  /// Version\n  bump,\n\n  /// Contract\n  contract,\n  init,\n  reuse,\n\n  /// Conditionals\n  onlyContent,\n  onlyArtifacts,\n  ipfsCheck,\n  http,\n}) => {\n  if (onlyContent) {\n    contract = ZERO_ADDRESS\n  }\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n  const apm = APM(web3, apmOptions)\n\n  return new TaskList(\n    [\n      {\n        title: 'Running prepublish script',\n        enabled: () => prepublish,\n        task: async (ctx, task) => runScriptTask(task, prepublishScript),\n      },\n      {\n        title: 'Check IPFS',\n        enabled: () => !http && ipfsCheck,\n        task: () => startIPFS.task({ apmOptions }),\n      },\n      {\n        title: `Applying version bump (${bump})`,\n        task: async ctx => {\n          let isValid = true\n          try {\n            const ipfsTimeout = 1000 * 60 * 5 // 5min\n            reporter.info('Fetching latest version from aragonPM...')\n            ctx.initialRepo = await apm.getLatestVersion(\n              module.appName,\n              ipfsTimeout\n            )\n\n            ctx.initialVersion = ctx.initialRepo.version\n\n            ctx.version = semver.valid(bump)\n              ? semver.valid(bump)\n              : semver.inc(ctx.initialVersion, bump)\n\n            isValid = await apm.isValidBump(\n              module.appName,\n              ctx.initialVersion,\n              ctx.version\n            )\n            if (!isValid) {\n              throw new Error(\n                \"Version bump is not valid, you have to respect APM's versioning policy. Check the version upgrade rules in the documentation: https://hack.aragon.org/docs/apm-ref.html#version-upgrade-rules\"\n              )\n            }\n\n            ctx.shouldDeployContract =\n              getMajor(ctx.initialVersion) !== getMajor(ctx.version)\n          } catch (e) {\n            if (e.message.indexOf('Invalid content URI') === 0) {\n              return\n            }\n            // Repo doesn't exist yet, deploy the first version\n            ctx.version = semver.valid(bump)\n              ? semver.valid(bump)\n              : semver.inc('0.0.0', bump) // All valid initial versions are a version bump from 0.0.0\n            if (apm.validInitialVersions.indexOf(ctx.version) === -1) {\n              throw new Error(\n                `Invalid initial version  (${ctx.version}). It can only be 0.0.1, 0.1.0 or 1.0.0.`\n              )\n            }\n            ctx.shouldDeployContract = true // assume first version should deploy a contract\n          }\n        },\n      },\n      {\n        title: 'Building frontend',\n        enabled: () => build && !http,\n        task: async (ctx, task) => runScriptTask(task, buildScript),\n      },\n      {\n        title: 'Compile contracts',\n        enabled: () => !onlyContent && web3Utils.isAddress(contract),\n        task: async () => compileContracts(),\n      },\n      {\n        title: 'Deploy contract',\n        enabled: ctx =>\n          !onlyContent &&\n          ((contract && !web3Utils.isAddress(contract)) ||\n            (!contract && ctx.shouldDeployContract && !reuse)),\n        task: async ctx => {\n          const deployTaskParams = {\n            contract,\n            init,\n            gasPrice,\n            network,\n            cwd,\n            web3,\n            apmOptions,\n          }\n\n          return deploy.task(deployTaskParams)\n        },\n      },\n      {\n        title: 'Determine contract address for version',\n        enabled: () => !onlyArtifacts,\n        task: async (ctx, task) => {\n          if (web3Utils.isAddress(contract)) {\n            ctx.contract = contract\n          }\n\n          // Check if we can fall back to a previous contract address\n          if (\n            !ctx.contract &&\n            apm.validInitialVersions.indexOf(ctx.version) === -1\n          ) {\n            task.output = 'No contract address provided, using previous one'\n\n            try {\n              const { contractAddress } = await apm.getLatestVersion(\n                module.appName\n              )\n              ctx.contract = contractAddress\n              return `Using ${ctx.contract}`\n            } catch (err) {\n              throw new Error('Could not determine previous contract')\n            }\n          }\n\n          // Contract address required for initial version\n          if (!ctx.contract) {\n            throw new Error('No contract address supplied for initial version')\n          }\n\n          return `Using ${contract}`\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n}\n\nexports.runPrepareForPublishTask = ({\n  reporter,\n\n  // Globals\n  cwd,\n  web3,\n  network,\n  module,\n  apm: apmOptions,\n  silent,\n  debug,\n\n  // Arguments\n\n  /// Files\n  publishDir,\n  files,\n  ignore,\n\n  /// Http\n  httpServedFrom,\n\n  /// Storage\n  provider,\n\n  /// Conditionals\n  onlyArtifacts,\n  onlyContent,\n  http,\n\n  // Context\n  initialRepo,\n  initialVersion,\n  version,\n  contractAddress,\n  deployArtifacts,\n}) => {\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n  const apm = APM(web3, apmOptions)\n\n  return new TaskList(\n    [\n      {\n        title: 'Prepare files for publishing',\n        enabled: () => !http,\n        task: async (ctx, task) => {\n          // Create temporary directory\n          if (!publishDir) {\n            const { path: tmpDir } = await tmp.dir()\n            publishDir = tmpDir\n          }\n\n          await prepareFilesForPublishing(publishDir, files, ignore)\n          ctx.pathToPublish = publishDir\n\n          return `Files copied to temporary directory: ${ctx.pathToPublish}`\n        },\n      },\n      {\n        title:\n          'Check for --http-served-from argument and copy manifest.json to destination',\n        enabled: () => http,\n        task: async (ctx, task) => {\n          if (!httpServedFrom) {\n            throw new Error('You need to provide --http-served-from argument')\n          }\n\n          const projectRoot = findProjectRoot()\n          const manifestOrigin = path.resolve(projectRoot, MANIFEST_FILE)\n          const manifestDst = path.resolve(httpServedFrom, MANIFEST_FILE)\n\n          if (!pathExistsSync(manifestDst) && pathExistsSync(manifestOrigin)) {\n            let manifest = await readJson(manifestOrigin)\n            manifest.start_url = path.basename(manifest.start_url)\n            manifest.script = path.basename(manifest.script)\n            await writeJson(manifestDst, manifest)\n          }\n\n          ctx.pathToPublish = httpServedFrom\n        },\n      },\n      {\n        title: 'Generate application artifact',\n        skip: () => onlyContent && !module.path,\n        task: async (ctx, task) => {\n          const dir = onlyArtifacts ? cwd : ctx.pathToPublish\n\n          const contractPath = module.path\n          const roles = module.roles\n\n          // TODO: (Gabi) Use inquier to handle confirmation\n          async function invokeArtifactGeneration(answer) {\n            if (POSITIVE_ANSWERS.indexOf(answer) > -1) {\n              await generateApplicationArtifact(\n                cwd,\n                apm,\n                dir,\n                module,\n                deployArtifacts,\n                web3,\n                reporter\n              )\n              await generateFlattenedCode(dir, contractPath)\n              return `Saved artifact in ${dir}/${ARTIFACT_FILE}`\n            }\n            throw new Error('Aborting publication...')\n          }\n\n          // If an artifact file exist we check it to reuse\n          if (pathExistsSync(`${dir}/${ARTIFACT_FILE}`)) {\n            const existingArtifactPath = path.resolve(dir, ARTIFACT_FILE)\n            const existingArtifact = await readJson(existingArtifactPath)\n            const rebuild = await sanityCheck(\n              cwd,\n              roles,\n              contractPath,\n              existingArtifact\n            )\n            if (rebuild) {\n              return taskInput(\n                `Couldn't reuse artifact due to mismatches, regenerate now? [y]es/[a]bort`,\n                {\n                  validate: value => {\n                    return ANSWERS.indexOf(value) > -1\n                  },\n                  done: async answer => invokeArtifactGeneration(answer),\n                }\n              )\n            } else {\n              return task.skip('Using existing artifact')\n            }\n          }\n\n          // If only content we fetch artifacts from previous version\n          if (\n            onlyContent &\n            (apm.validInitialVersions.indexOf(version) === -1)\n          ) {\n            try {\n              task.output = 'Fetching artifacts from previous version'\n              await copyCurrentApplicationArtifacts(\n                cwd,\n                dir,\n                apm,\n                initialRepo,\n                version,\n                roles,\n                contractPath\n              )\n              if (!pathExistsSync(`${dir}/${SOLIDITY_FILE}`)) {\n                await generateFlattenedCode(dir, contractPath)\n              }\n              return task.skip(`Using artifacts from v${initialVersion}`)\n            } catch (e) {\n              if (e.message === 'Artifact mismatch') {\n                return taskInput(\n                  \"Couldn't reuse existing artifact due to mismatches, regenerate now? [y]es/[a]bort\",\n                  {\n                    validate: value => {\n                      return ANSWERS.indexOf(value) > -1\n                    },\n                    done: async answer => invokeArtifactGeneration(answer),\n                  }\n                )\n              } else {\n                return taskInput(\n                  \"Couldn't fetch current artifact version to copy it. Please make sure your IPFS or HTTP server are running. Otherwise, generate now? [y]es/[a]bort\",\n                  {\n                    validate: value => {\n                      return ANSWERS.indexOf(value) > -1\n                    },\n                    done: async answer => invokeArtifactGeneration(answer),\n                  }\n                )\n              }\n            }\n          }\n\n          await invokeArtifactGeneration('yes')\n\n          return `Saved artifact in ${dir}/artifact.json`\n        },\n      },\n      {\n        title: `Publish intent`,\n        task: async (ctx, task) => {\n          ctx.contractInstance = null // clean up deploy sub-command artifacts\n          const accounts = await web3.eth.getAccounts()\n          const from = accounts[0]\n          ctx.intent = await apm.publishVersionIntent(\n            from,\n            module.appName,\n            version,\n            http ? 'http' : provider,\n            http || ctx.pathToPublish,\n            contractAddress\n          )\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n}\n\nexports.runPublishTask = ({\n  reporter,\n\n  // Globals\n  gasPrice,\n  web3,\n  wsProvider,\n  module,\n  apm: apmOptions,\n  silent,\n  debug,\n\n  // Arguments\n  /// Conditionals\n  onlyArtifacts,\n  onlyContent,\n\n  /// Context\n  dao,\n  proxyAddress,\n  methodName,\n  params,\n}) => {\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n  return new TaskList(\n    [\n      {\n        title: `Publish ${module.appName}`,\n        enabled: () => !onlyArtifacts,\n        task: async (ctx, task) => {\n          try {\n            const getTransactionPath = wrapper => {\n              return wrapper.getTransactionPath(\n                proxyAddress,\n                methodName,\n                params\n              )\n            }\n\n            return execTask(dao, getTransactionPath, {\n              ipfsCheck: false,\n              reporter,\n              gasPrice,\n              apm: apmOptions,\n              web3,\n              wsProvider,\n            })\n          } catch (e) {\n            throw e\n          }\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n}\n\nexports.handler = async function({\n  reporter,\n\n  // Globals\n  gasPrice,\n  cwd,\n  web3,\n  network,\n  wsProvider,\n  module,\n  apm: apmOptions,\n  silent,\n  debug,\n\n  // Arguments\n\n  bump,\n  contract,\n  onlyArtifacts,\n  reuse,\n  provider,\n  files,\n  ignore,\n  ipfsCheck,\n  publishDir,\n  init,\n  onlyContent,\n  build,\n  buildScript,\n  prepublish,\n  prepublishScript,\n  http,\n  httpServedFrom,\n  propagateContent,\n  skipConfirmation,\n}) {\n  web3 = web3 || (await ensureWeb3(network))\n\n  const {\n    initialRepo,\n    initialVersion,\n    version,\n    contract: contractAddress,\n    deployArtifacts,\n  } = await exports\n    .runSetupTask({\n      reporter,\n      gasPrice,\n      cwd,\n      web3,\n      network,\n      module,\n      apm: apmOptions,\n      silent,\n      debug,\n      prepublish,\n      prepublishScript,\n      build,\n      buildScript,\n      bump,\n      contract,\n      init,\n      reuse,\n      onlyContent,\n      onlyArtifacts,\n      ipfsCheck,\n      http,\n    })\n    .run()\n\n  const { pathToPublish, intent } = await exports\n    .runPrepareForPublishTask({\n      reporter,\n      cwd,\n      web3,\n      network,\n      module,\n      apm: apmOptions,\n      silent,\n      debug,\n      publishDir,\n      files,\n      ignore,\n      httpServedFrom,\n      provider,\n      onlyArtifacts,\n      onlyContent,\n      http,\n      // context\n      initialRepo,\n      initialVersion,\n      version,\n      contractAddress,\n      deployArtifacts,\n    })\n    .run()\n\n  // Output publish info\n\n  const { appName } = module\n  const { dao, proxyAddress, methodName, params } = intent\n\n  const contentURI = web3.utils.hexToAscii(params[params.length - 1])\n  const [contentProvier, contentLocation] = contentURI.split(/:(.+)/)\n\n  if (files.length === 1 && path.normalize(files[0]) === '.') {\n    reporter.warning(\n      `Publishing files from the project's root folder is not recommended. Consider using the distribution folder of your project: \"--files <folder>\".`\n    )\n  }\n\n  console.log(\n    '\\n',\n    `The following information will be published:`,\n    '\\n',\n    `Contract address: ${chalk.blue(contractAddress || ZERO_ADDRESS)}`,\n    '\\n',\n    `Content (${contentProvier}): ${chalk.blue(contentLocation)}`\n    // TODO: (Gabi) Add extra relevant info (e.g. size)\n    // `Size: ${chalk.blue()}`,\n    // '\\n',\n    // `Number of files: ${chalk.blue()}`,\n    // '\\n'\n  )\n\n  if (contentProvier === 'ipfs') {\n    console.log(\n      '\\n',\n      'Explore the ipfs content locally:',\n      '\\n',\n      chalk.bold(\n        `http://localhost:8080/ipfs/QmSDgpiHco5yXdyVTfhKxr3aiJ82ynz8V14QcGKicM3rVh/#/explore/${contentLocation}`\n      ),\n      '\\n'\n    )\n  }\n\n  if (!skipConfirmation) {\n    const { confirmation } = await inquirer.prompt([\n      {\n        type: 'confirm',\n        name: 'confirmation',\n        message: `${chalk.green(`Publish to ${appName} repo`)}`,\n      },\n    ])\n    // new line after confirm\n    console.log()\n    if (!confirmation) process.exit()\n  }\n\n  const { receipt, transactionPath } = await exports\n    .runPublishTask({\n      reporter,\n      gasPrice,\n      web3,\n      wsProvider,\n      module,\n      apm: apmOptions,\n      silent,\n      debug,\n      onlyArtifacts,\n      onlyContent,\n      // context\n      dao,\n      proxyAddress,\n      methodName,\n      params,\n    })\n    .run()\n\n  const { transactionHash, status } = receipt\n\n  if (!status) {\n    reporter.error(`\\nPublish transaction reverted:\\n`)\n  } else {\n    // If the version is still the same, the publish intent was forwarded but not immediately executed (p.e. Voting)\n    if (initialVersion === version) {\n      console.log(\n        '\\n',\n        `Successfully executed: \"${chalk.green(\n          transactionPath[0].description\n        )}\"`,\n        '\\n'\n      )\n    } else {\n      const logVersion = 'v' + version\n\n      console.log(\n        '\\n',\n        `Successfully published ${appName} ${chalk.green(logVersion)} :`,\n        '\\n'\n      )\n    }\n  }\n\n  console.log(`Transaction hash: ${chalk.blue(transactionHash)}`, '\\n')\n\n  reporter.debug(`Published directory: ${chalk.blue(pathToPublish)}\\n`)\n\n  // Propagate content\n  if (!http && propagateContent) {\n    if (!skipConfirmation) {\n      const { confirmation } = await inquirer.prompt([\n        {\n          type: 'confirm',\n          name: 'confirmation',\n          message: chalk.green(`Propagate content`),\n        },\n      ])\n      // new line after confirm\n      console.log()\n      if (!confirmation) process.exit()\n    }\n\n    const propagateTask = await propagateIPFS.task({\n      apmOptions,\n      cid: contentLocation,\n      debug,\n      silent,\n    })\n\n    const { CIDs, result } = await propagateTask.run()\n\n    console.log(\n      '\\n',\n      `Queried ${chalk.blue(CIDs.length)} CIDs at ${chalk.blue(\n        result.gateways.length\n      )} gateways`,\n      '\\n',\n      `Requests succeeded: ${chalk.green(result.succeeded)}`,\n      '\\n',\n      `Requests failed: ${chalk.red(result.failed)}`,\n      '\\n'\n    )\n\n    reporter.debug(`Gateways: ${result.gateways.join(', ')}`)\n    reporter.debug(`Errors: \\n${result.errors.map(JSON.stringify).join('\\n')}`)\n    // TODO: add your own gateways\n  }\n  process.exit()\n}\n"],"file":"publish.js"}