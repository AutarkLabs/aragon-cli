{"version":3,"sources":["../../../../src/commands/apm_cmds/util/generate-artifact.js"],"names":["fs","require","path","readJson","writeJson","flatten","extract","namehash","taskInput","keccak256","ARTIFACT_FILE","SOLIDITY_FILE","ARAPP_FILE","POSITIVE_ANSWERS","NEGATIVE_ANSWERS","ANSWERS","concat","getMajor","version","split","getRoles","roles","map","role","Object","assign","bytes","id","getEnvironments","cwd","arappManifestPath","resolve","arappManifestFile","environments","getContractAbi","contractPath","contractInterfacePath","basename","contractInterface","abi","decorateFunctionsWithAbi","functions","web3","abiFunctions","filter","elem","type","forEach","f","find","eth","encodeFunctionSignature","sig","deprecatedFunctions","apm","artifact","reporter","deprecatedFunctionsSig","Set","getAllVersions","appName","versions","lastMajor","reverse","deprecatedOnVersion","some","obj","has","push","add","length","warning","validate","value","indexOf","done","answer","Error","generateApplicationArtifact","outputPath","module","deployArtifacts","appId","hash","deployment","flattenedCode","spaces","generateFlattenedCode","dir","sourcePath","writeFileSync","sanityCheck","newRoles","newContractPath","oldArtifact","newContractRoles","newContractEnvironments","newContractAbi","JSON","stringify","copyCurrentApplicationArtifacts","repo","newVersion","copyingFiles","content","uri","provider","location","Promise","all","file","getFile","filePath","fileContent","fileName","copy","updateArtifactVersion","newContent","parse","evaluateFile","rebuild","item","copyArray","exports"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst path = require('path')\nconst { readJson, writeJson } = require('fs-extra')\nconst flatten = require('truffle-flattener')\nconst extract = require('../../../helpers/solidity-extractor')\nconst namehash = require('eth-ens-namehash')\nconst taskInput = require('listr-input')\nconst { keccak256 } = require('js-sha3')\n\nconst { ARTIFACT_FILE } = require('./preprare-files')\nconst SOLIDITY_FILE = 'code.sol'\nconst ARAPP_FILE = 'arapp.json'\n\nconst POSITIVE_ANSWERS = ['yes', 'y']\nconst NEGATIVE_ANSWERS = ['no', 'n', 'abort', 'a']\nconst ANSWERS = POSITIVE_ANSWERS.concat(NEGATIVE_ANSWERS)\n\nconst getMajor = version => version.split('.')[0]\n\nconst getRoles = roles =>\n  roles.map(role => Object.assign(role, { bytes: '0x' + keccak256(role.id) }))\n\nasync function getEnvironments(cwd) {\n  const arappManifestPath = path.resolve(cwd, ARAPP_FILE)\n  const arappManifestFile = await readJson(arappManifestPath)\n  return arappManifestFile.environments\n}\n\nasync function getContractAbi(cwd, contractPath) {\n  const contractInterfacePath = path.resolve(\n    cwd,\n    'build/contracts',\n    path.basename(contractPath, '.sol') + '.json'\n  )\n  const contractInterface = await readJson(contractInterfacePath)\n  return contractInterface.abi\n}\n\nfunction decorateFunctionsWithAbi(functions, abi, web3) {\n  const abiFunctions = abi.filter(elem => elem.type === 'function')\n  functions.forEach(f => {\n    f.abi = abiFunctions.find(\n      elem =>\n        web3.eth.abi.encodeFunctionSignature(elem) ===\n        web3.eth.abi.encodeFunctionSignature(f.sig)\n    )\n  })\n}\n\nasync function deprecatedFunctions(apm, artifact, web3, reporter) {\n  const deprecatedFunctions = {}\n  try {\n    const deprecatedFunctionsSig = new Set()\n    const versions = await apm.getAllVersions(artifact.appName)\n    let lastMajor = -1\n    versions.reverse().forEach(async version => {\n      let deprecatedOnVersion = []\n      // iterate on major versions\n      if (getMajor(version.version) !== lastMajor) {\n        lastMajor = getMajor(version.version)\n        if (version.functions) {\n          version.functions.forEach(f => {\n            if (\n              !artifact.functions.some(obj => obj.sig === f.sig) &&\n              !deprecatedFunctionsSig.has(f.sig)\n            ) {\n              deprecatedOnVersion.push(f)\n              deprecatedFunctionsSig.add(f.sig)\n            }\n          })\n          if (deprecatedOnVersion.length) {\n            deprecatedFunctions[`${lastMajor}.0.0`] = deprecatedOnVersion\n            decorateFunctionsWithAbi(deprecatedOnVersion, version.abi, web3)\n            deprecatedOnVersion = []\n          }\n        } else {\n          reporter.warning(\n            `Cannot find artifacts for version ${version.version} in aragonPM. Please make sure the package was published and your IPFS or HTTP server are running.\\n`\n          )\n          return taskInput(`Abort publication? [y]es/[n]o`, {\n            validate: value => {\n              return ANSWERS.indexOf(value) > -1\n            },\n            done: async answer => {\n              if (POSITIVE_ANSWERS.indexOf(answer) > -1) {\n                throw new Error('Aborting publication...')\n              }\n            },\n          })\n        }\n      }\n    })\n  } catch (e) {\n    // Catch ENS error on first version\n  }\n  return deprecatedFunctions\n}\n\nasync function generateApplicationArtifact(\n  cwd,\n  apm,\n  outputPath,\n  module,\n  deployArtifacts,\n  web3,\n  reporter\n) {\n  // Set appName, path & roles\n  let artifact = Object.assign({}, module)\n\n  // Set `appId`\n  artifact.appId = namehash.hash(artifact.appName)\n\n  // Set environments\n  artifact.environments = await getEnvironments(cwd)\n\n  // Set ABI\n  artifact.abi = await getContractAbi(cwd, artifact.path)\n\n  if (deployArtifacts) {\n    artifact.deployment = deployArtifacts\n    artifact.deployment.flattenedCode = `./${SOLIDITY_FILE}`\n  }\n\n  // Analyse contract functions and returns an array\n  // > [{ sig: 'transfer(address)', role: 'X_ROLE', notice: 'Transfers..'}]\n  artifact.functions = await extract(path.resolve(cwd, artifact.path))\n  // extract abi for each function\n  // > [{ sig: , role: , notice: , abi: }]\n  decorateFunctionsWithAbi(artifact.functions, artifact.abi, web3)\n\n  // Consult old (major) version's artifacts and return an array\n  // of deprecated functions per version\n  // > \"deprecatedFunctions\": { \"1.0.0\": [{}], \"2.0.0\": [{}] }\n  artifact.deprecatedFunctions = await deprecatedFunctions(\n    apm,\n    artifact,\n    web3,\n    reporter\n  )\n\n  if (artifact.roles) {\n    getRoles(artifact.roles)\n  }\n\n  // Save artifact\n  await writeJson(path.resolve(outputPath, ARTIFACT_FILE), artifact, {\n    spaces: '\\t',\n  })\n\n  return artifact\n}\n\nasync function generateFlattenedCode(dir, sourcePath) {\n  const flattenedCode = await flatten([sourcePath])\n  fs.writeFileSync(path.resolve(dir, SOLIDITY_FILE), flattenedCode)\n}\n\n// Sanity check artifact.json\nasync function sanityCheck(cwd, newRoles, newContractPath, oldArtifact) {\n  const { roles, environments, abi, path } = oldArtifact\n\n  const newContractRoles = await getRoles(newRoles)\n  const newContractEnvironments = await getEnvironments(cwd)\n  const newContractAbi = await getContractAbi(cwd, newContractPath)\n\n  return (\n    JSON.stringify(newContractRoles) !== JSON.stringify(roles) ||\n    JSON.stringify(newContractEnvironments) !== JSON.stringify(environments) ||\n    JSON.stringify(newContractAbi) !== JSON.stringify(abi) ||\n    newContractPath !== path\n  )\n}\n\nasync function copyCurrentApplicationArtifacts(\n  cwd,\n  outputPath,\n  apm,\n  repo,\n  newVersion,\n  roles,\n  contractPath\n) {\n  const copyingFiles = [ARTIFACT_FILE, SOLIDITY_FILE]\n  const { content } = repo\n  const uri = `${content.provider}:${content.location}`\n\n  const copy = await Promise.all(\n    copyingFiles.map(async file => {\n      try {\n        return {\n          filePath: path.resolve(outputPath, file),\n          fileContent: await apm.getFile(uri, file),\n          fileName: file,\n        }\n      } catch (e) {\n        // Only throw if fetching artifact fails, if code can't be found\n        // continue as it could be fetched from previous versions\n        if (file === ARTIFACT_FILE) {\n          throw e\n        }\n      }\n    })\n  )\n\n  const updateArtifactVersion = (file, version) => {\n    const newContent = JSON.parse(file.fileContent)\n    newContent.version = version\n    return { ...file, fileContent: JSON.stringify(newContent, null, 2) }\n  }\n\n  const evaluateFile = async file => {\n    if (file.fileName === ARTIFACT_FILE) {\n      const rebuild = await sanityCheck(\n        cwd,\n        roles,\n        contractPath,\n        JSON.parse(file.fileContent)\n      )\n      if (rebuild) {\n        throw new Error('Artifact mismatch')\n      } else {\n        return updateArtifactVersion(file, newVersion)\n      }\n    }\n    return file\n  }\n\n  const copyArray = await Promise.all(\n    copy.filter(item => item).map(file => evaluateFile(file))\n  )\n\n  copyArray.forEach(({ fileName, filePath, fileContent }) =>\n    fs.writeFileSync(filePath, fileContent)\n  )\n}\n\nmodule.exports = {\n  POSITIVE_ANSWERS,\n  NEGATIVE_ANSWERS,\n  ANSWERS,\n  SOLIDITY_FILE,\n  getMajor,\n  generateApplicationArtifact,\n  generateFlattenedCode,\n  sanityCheck,\n  copyCurrentApplicationArtifacts,\n}\n"],"file":"generate-artifact.js"}