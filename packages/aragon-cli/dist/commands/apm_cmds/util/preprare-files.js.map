{"version":3,"sources":["../../../../src/commands/apm_cmds/util/preprare-files.js"],"names":["path","require","ignore","fs","findProjectRoot","copy","pathExistsSync","promisify","MANIFEST_FILE","ARTIFACT_FILE","prepareFilesForPublishing","tmpDir","filterIgnoredFiles","src","relativeSrc","relative","projectRoot","filter","ignores","files","ignorePatterns","add","ipfsignorePath","resolve","ipfsignoreFile","readFileSync","toString","gitignorePath","gitignoreFile","Promise","all","map","file","lstat","stats","destination","isFile","manifestOrigin","manifestDst","artifactOrigin","artifactDst","module","exports"],"mappings":"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","sourcesContent":["const path = require('path')\nconst ignore = require('ignore')\nconst fs = require('fs')\nconst { findProjectRoot } = require('../../../util')\nconst { copy, pathExistsSync } = require('fs-extra')\nconst { promisify } = require('util')\n\nconst MANIFEST_FILE = 'manifest.json'\nconst ARTIFACT_FILE = 'artifact.json'\n\n/**\n * Moves the specified files to a temporary directory and returns the path to\n * the temporary directory.\n * @param {string} tmpDir Temporary directory\n * @param {Array<string>} files An array of file paths to include\n * @param {string} ignorePatterns An array of glob-like pattern of files to ignore\n * @return {string} The path to the temporary directory\n */\nasync function prepareFilesForPublishing(\n  tmpDir,\n  files = [],\n  ignorePatterns = null\n) {\n  // Ignored files filter\n  const filter = ignore().add(ignorePatterns)\n  const projectRoot = findProjectRoot()\n\n  const ipfsignorePath = path.resolve(projectRoot, '.ipfsignore')\n  if (pathExistsSync(ipfsignorePath)) {\n    const ipfsignoreFile = fs.readFileSync(ipfsignorePath).toString()\n    filter.add(ipfsignoreFile)\n  } else {\n    const gitignorePath = path.resolve(projectRoot, '.gitignore')\n    if (pathExistsSync(gitignorePath)) {\n      const gitignoreFile = fs.readFileSync(gitignorePath).toString()\n      filter.add(gitignoreFile)\n    }\n  }\n\n  function filterIgnoredFiles(src) {\n    const relativeSrc = path.relative(projectRoot, src)\n    return relativeSrc === '' ? true : !filter.ignores(relativeSrc)\n  }\n\n  // Copy files\n  await Promise.all(\n    files.map(async file => {\n      const stats = await promisify(fs.lstat)(file)\n\n      let destination = tmpDir\n      if (stats.isFile()) {\n        destination = path.resolve(tmpDir, file)\n      }\n\n      // check files are not ignored\n      if (filter.ignores(file)) filter.add(`!${file}`)\n\n      if (filter.ignores(file + '/')) filter.add(`!${file}/`)\n\n      return copy(file, destination, {\n        filter: filterIgnoredFiles,\n      })\n    })\n  )\n\n  const manifestOrigin = path.resolve(projectRoot, MANIFEST_FILE)\n  const manifestDst = path.resolve(tmpDir, MANIFEST_FILE)\n\n  if (!pathExistsSync(manifestDst) && pathExistsSync(manifestOrigin)) {\n    await copy(manifestOrigin, manifestDst)\n  }\n\n  const artifactOrigin = path.resolve(projectRoot, ARTIFACT_FILE)\n  const artifactDst = path.resolve(tmpDir, ARTIFACT_FILE)\n\n  if (!pathExistsSync(artifactDst) && pathExistsSync(artifactOrigin)) {\n    await copy(artifactOrigin, artifactDst)\n  }\n\n  return tmpDir\n}\n\nmodule.exports = { MANIFEST_FILE, ARTIFACT_FILE, prepareFilesForPublishing }\n"],"file":"preprare-files.js"}