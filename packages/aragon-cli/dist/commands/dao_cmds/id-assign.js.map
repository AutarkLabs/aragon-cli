{"version":3,"sources":["../../../src/commands/dao_cmds/id-assign.js"],"names":["TaskList","require","ENS","ensureWeb3","green","listrOpts","isAddress","registrarAbi","abi","sha3","ARAGON_DOMAIN","idAssignCommand","idAssignDescribe","idAssignBuilder","yargs","positional","description","type","exports","command","describe","builder","handler","task","dao","aragonId","web3","gasPrice","apmOptions","silent","debug","reporter","error","process","exit","tasks","title","ctx","test","RegExp","ens","currentProvider","domain","includes","resolver","addr","exists","NameNotFound","eth","Contract","owner","registrar","methods","register","getAccounts","from","gas","send","receipt","network","apm","run","then","success"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,QAAQ,GAAGC,OAAO,CAAC,OAAD,CAAxB;;AACA,IAAMC,GAAG,GAAGD,OAAO,CAAC,cAAD,CAAnB;;eACuBA,OAAO,CAAC,6BAAD,C;IAAtBE,U,YAAAA,U;;gBACUF,OAAO,CAAC,OAAD,C;IAAjBG,K,aAAAA,K;;AACR,IAAMC,SAAS,GAAGJ,OAAO,CAAC,6CAAD,CAAzB;;gBACsBA,OAAO,CAAC,YAAD,C;IAArBK,S,aAAAA,S;;AACR,IAAMC,YAAY,GAAGN,OAAO,CAAC,wCAAD,CAAP,CAAkDO,GAAvE;;gBACiBP,OAAO,CAAC,YAAD,C;IAAhBQ,I,aAAAA,I;;AAER,IAAMC,aAAa,GAAG,cAAtB,C,CAEA;;AACA,IAAMC,eAAe,GAAG,0BAAxB;AACA,IAAMC,gBAAgB,GAAG,sCAAzB;;AACA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK,EAAI;AAC/B,SAAOA,KAAK,CACTC,UADI,CACO,KADP,EACc;AACjBC,IAAAA,WAAW,EAAE,aADI;AAEjBC,IAAAA,IAAI,EAAE;AAFW,GADd,EAKJF,UALI,CAKO,WALP,EAKoB;AACvBC,IAAAA,WAAW,EAAE,WADU;AAEvBC,IAAAA,IAAI,EAAE;AAFiB,GALpB,CAAP;AASD,CAVD,C,CAYA;;;AACAC,OAAO,CAACC,OAAR,GAAkB,sBAAlB;AACAD,OAAO,CAACE,QAAR,GAAmB,8BAAnB;;AAEAF,OAAO,CAACG,OAAR,GAAkB,UAAAP,KAAK,EAAI;AACzB,SAAOD,eAAe,CAACC,KAAD,CAAf,CAAuBK,OAAvB,CACLR,eADK,EAELC,gBAFK,EAGLC,eAHK,EAILK,OAAO,CAACI,OAJH,CAAP;AAMD,CAPD;;AASAJ,OAAO,CAACK,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACbC,YAAAA,GADa,QACbA,GADa,EAEbC,QAFa,QAEbA,QAFa,EAGbC,IAHa,QAGbA,IAHa,EAIbC,QAJa,QAIbA,QAJa,EAKbC,UALa,QAKbA,UALa,EAMbC,MANa,QAMbA,MANa,EAObC,KAPa,QAObA,KAPa,EAQbC,QARa,QAQbA,QARa;;AAUb,gBAAI,CAACzB,SAAS,CAACkB,GAAD,CAAd,EAAqB;AACnBO,cAAAA,QAAQ,CAACC,KAAT,CAAe,qBAAf;AACAC,cAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAEKC,YAAAA,KAfO,GAeC,IAAInC,QAAJ,CACZ,CACE;AACEoC,cAAAA,KAAK,EAAE,eADT;AAEEb,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,iBAAMc,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACJ,8BACE,CAAC,aAAaC,IAAb,CAAkBb,QAAlB,CAAD,IACA,CAAC,IAAIc,MAAJ,sBAAyB7B,aAAzB,QAA2C4B,IAA3C,CAAgDb,QAAhD,CAFH,EAGE;AACAM,4BAAAA,QAAQ,CAACC,KAAT,CAAe,mBAAf;AACAC,4BAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AAEKM,0BAAAA,GATF,GASSH,GAAG,CAACG,GAAJ,GAAU,IAAItC,GAAJ,CACrBwB,IAAI,CAACe,eADgB,EAErBb,UAAU,CAAC,cAAD,CAFW,CATnB;AAcJS,0BAAAA,GAAG,CAACK,MAAJ,GAAajB,QAAQ,CAACkB,QAAT,CAAkBjC,aAAlB,IACTe,QADS,aAENA,QAFM,cAEMf,aAFN,CAAb,CAdI,CAkBJ;;AAlBI;AAAA;AAAA,iCAoBmB8B,GAAG,CAACI,QAAJ,CAAaP,GAAG,CAACK,MAAjB,EAAyBG,IAAzB,EApBnB;;AAAA;AAoBIC,0BAAAA,MApBJ;;AAsBF,8BAAIA,MAAJ,EAAY;AACVf,4BAAAA,QAAQ,CAACC,KAAT,0BACoBK,GAAG,CAACK,MADxB,qCACyDI,MADzD;AAGAb,4BAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD;;AA3BC;AAAA;;AAAA;AAAA;AAAA;;AAAA,gCA8BE,gBAAQhC,GAAG,CAAC6C,YA9Bd;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFN,aADF,EAqCE;AACEX,cAAAA,KAAK,EAAE,cADT;AAEEb,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,kBAAMc,GAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yCACkBX,IAAI,CAACsB,GAAL,CAASC,QAD3B;AAAA,yCAEF1C,YAFE;AAAA;AAAA,iCAGI8B,GAAG,CAACG,GAAJ,CAAQU,KAAR,CAAcxC,aAAd,CAHJ;;AAAA;AAAA;AACEyC,0BAAAA,SADF;AAAA,yCAMgBA,SAAS,CAACC,OAAV,CACjBC,QADiB,CACR5C,IAAI,CAACgB,QAAD,CADI,EACQD,GADR,CANhB;AAAA;AAAA,iCASaE,IAAI,CAACsB,GAAL,CAASM,WAAT,EATb;;AAAA;AAAA,wDASqC,CATrC;AAAA,yCAWU3B,QAXV;AAAA;AASA4B,4BAAAA,IATA;AAUAC,4BAAAA,GAVA,EAUK,SAVL;AAWA7B,4BAAAA,QAXA;AAAA;AAAA;AAAA,8CAQD8B,IARC;;AAAA;AAMJpB,0BAAAA,GAAG,CAACqB,OANA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFN,aArCF,CADY,EAwDZrD,SAAS,CAACwB,MAAD,EAASC,KAAT,CAxDG,CAfD;AAAA,8CA0ENK,KA1EM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA;;AA6EAjB,OAAO,CAACI,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBG,YAAAA,QADgB,SAChBA,QADgB,EAEhBM,QAFgB,SAEhBA,QAFgB,EAGhB4B,OAHgB,SAGhBA,OAHgB,EAIX/B,UAJW,SAIhBgC,GAJgB,EAKhBpC,GALgB,SAKhBA,GALgB,EAMhBG,QANgB,SAMhBA,QANgB;AAAA;AAAA,mBAQGxB,UAAU,CAACwD,OAAD,CARb;;AAAA;AAQVjC,YAAAA,IARU;AAAA;AAAA,mBAUGR,OAAO,CAACK,IAAR,CAAa;AAC9BE,cAAAA,QAAQ,EAARA,QAD8B;AAE9BD,cAAAA,GAAG,EAAHA,GAF8B;AAG9BE,cAAAA,IAAI,EAAJA,IAH8B;AAI9BK,cAAAA,QAAQ,EAARA,QAJ8B;AAK9B4B,cAAAA,OAAO,EAAPA,OAL8B;AAM9B/B,cAAAA,UAAU,EAAVA,UAN8B;AAO9BD,cAAAA,QAAQ,EAARA;AAP8B,aAAb,CAVH;;AAAA;AAUVJ,YAAAA,IAVU;AAAA,8CAmBTA,IAAI,CAACsC,GAAL,GAAWC,IAAX,CAAgB,UAAAzB,GAAG,EAAI;AAC5BN,cAAAA,QAAQ,CAACgC,OAAT,WAAoB3D,KAAK,CAACiC,GAAG,CAACK,MAAL,CAAzB,uCAAkElB,GAAlE;AACAS,cAAAA,OAAO,CAACC,IAAR;AACD,aAHM,CAnBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["const TaskList = require('listr')\nconst ENS = require('ethereum-ens')\nconst { ensureWeb3 } = require('../../helpers/web3-fallback')\nconst { green } = require('chalk')\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\nconst { isAddress } = require('web3-utils')\nconst registrarAbi = require('@aragon/id/abi/IFIFSResolvingRegistrar').abi\nconst { sha3 } = require('web3-utils')\n\nconst ARAGON_DOMAIN = 'aragonid.eth'\n\n// dao id assign command\nconst idAssignCommand = 'assign <dao> <aragon-id>'\nconst idAssignDescribe = 'Assign an Aragon Id to a DAO address'\nconst idAssignBuilder = yargs => {\n  return yargs\n    .positional('dao', {\n      description: 'DAO address',\n      type: 'string',\n    })\n    .positional('aragon-id', {\n      description: 'Aragon Id',\n      type: 'string',\n    })\n}\n\n// dao id shortcut\nexports.command = 'id <dao> <aragon-id>'\nexports.describe = 'Shortcut for `dao id assign`'\n\nexports.builder = yargs => {\n  return idAssignBuilder(yargs).command(\n    idAssignCommand,\n    idAssignDescribe,\n    idAssignBuilder,\n    exports.handler\n  )\n}\n\nexports.task = async ({\n  dao,\n  aragonId,\n  web3,\n  gasPrice,\n  apmOptions,\n  silent,\n  debug,\n  reporter,\n}) => {\n  if (!isAddress(dao)) {\n    reporter.error('Invalid DAO address')\n    process.exit(1)\n  }\n\n  const tasks = new TaskList(\n    [\n      {\n        title: 'Validating Id',\n        task: async ctx => {\n          if (\n            !/^([\\w-]+)$/.test(aragonId) &&\n            !new RegExp(`^([\\\\w-]+).${ARAGON_DOMAIN}$`).test(aragonId)\n          ) {\n            reporter.error('Invalid Aragon Id')\n            process.exit(1)\n          }\n\n          const ens = (ctx.ens = new ENS(\n            web3.currentProvider,\n            apmOptions['ens-registry']\n          ))\n\n          ctx.domain = aragonId.includes(ARAGON_DOMAIN)\n            ? aragonId\n            : `${aragonId}.${ARAGON_DOMAIN}`\n\n          // Check name doesn't already exist\n          try {\n            const exists = await ens.resolver(ctx.domain).addr()\n\n            if (exists) {\n              reporter.error(\n                `Cannot assign: ${ctx.domain} is already assigned to ${exists}.`\n              )\n              process.exit(1)\n            }\n          } catch (err) {\n            // ens.resolver() throws an ENS.NameNotFound error if name doesn't exist\n            if (err !== ENS.NameNotFound) throw err\n          }\n        },\n      },\n      {\n        title: 'Assigning Id',\n        task: async ctx => {\n          const registrar = new web3.eth.Contract(\n            registrarAbi,\n            await ctx.ens.owner(ARAGON_DOMAIN)\n          )\n\n          ctx.receipt = await registrar.methods\n            .register(sha3(aragonId), dao)\n            .send({\n              from: (await web3.eth.getAccounts())[0],\n              gas: '1000000',\n              gasPrice: gasPrice,\n            })\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n\n  return tasks\n}\n\nexports.handler = async function({\n  aragonId,\n  reporter,\n  network,\n  apm: apmOptions,\n  dao,\n  gasPrice,\n}) {\n  const web3 = await ensureWeb3(network)\n\n  const task = await exports.task({\n    aragonId,\n    dao,\n    web3,\n    reporter,\n    network,\n    apmOptions,\n    gasPrice,\n  })\n  return task.run().then(ctx => {\n    reporter.success(`${green(ctx.domain)} successfully assigned to ${dao}`)\n    process.exit()\n  })\n}\n"],"file":"id-assign.js"}