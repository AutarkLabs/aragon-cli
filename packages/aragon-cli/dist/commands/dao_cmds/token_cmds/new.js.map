{"version":3,"sources":["../../../../src/commands/dao_cmds/token_cmds/new.js"],"names":["TaskList","require","ensureWeb3","getContract","listrOpts","chalk","web3Utils","getRecommendedGasLimit","parseArgumentStringIfPossible","ZERO_ADDRESS","MAINNET_MINIME_TOKEN_FACTORY","RINKEBY_MINIME_TOKEN_FACTORY","exports","command","describe","builder","yargs","positional","description","option","type","task","web3","gasPrice","tokenName","symbol","transferEnabled","decimalUnits","tokenFactoryAddress","silent","debug","eth","getAccounts","accounts","from","net","getId","chainId","title","enabled","isAddress","ctx","artifact","contract","Contract","abi","deployTx","deploy","data","bytecode","estimateGas","estimatedGas","gas","deployPromise","send","on","receipt","factoryAddress","contractAddress","transactionHash","factoryTxHash","error","output","arguments","tokenAddress","tokenTxHash","handler","reporter","network","run","then","success","green","info","blue","process","exit"],"mappings":"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","sourcesContent":["const TaskList = require('listr')\nconst { ensureWeb3 } = require('../../../helpers/web3-fallback')\nconst { getContract } = require('../../../util')\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\nconst chalk = require('chalk')\nconst web3Utils = require('web3-utils')\nconst {\n  getRecommendedGasLimit,\n  parseArgumentStringIfPossible,\n  ZERO_ADDRESS,\n} = require('../../../util')\n\nconst MAINNET_MINIME_TOKEN_FACTORY =\n  '0xA29EF584c389c67178aE9152aC9C543f9156E2B3'\nconst RINKEBY_MINIME_TOKEN_FACTORY =\n  '0xad991658443c56b3dE2D7d7f5d8C68F339aEef29'\n\nexports.command =\n  'new <token-name> <symbol> [decimal-units] [transfer-enabled] [token-factory-address]'\n\nexports.describe = 'Create a new MiniMe token'\n\nexports.builder = yargs => {\n  return yargs\n    .positional('token-name', {\n      description: 'Full name of the new Token',\n    })\n    .positional('symbol', {\n      description: 'Symbol of the new Token',\n    })\n    .option('decimal-units', {\n      description: 'Total decimal units the new token will use',\n      default: 18,\n    })\n    .option('transfer-enabled', {\n      description: 'Whether the new token will have transfers enabled',\n      default: true,\n    })\n    .option('token-factory-address', {\n      description: 'Address of the MiniMeTokenFactory',\n      type: 'string',\n    })\n}\n\nexports.task = async ({\n  web3,\n  gasPrice,\n  tokenName,\n  symbol,\n  transferEnabled,\n  decimalUnits,\n  tokenFactoryAddress,\n  silent,\n  debug,\n}) => {\n  // Decode sender\n  const accounts = await web3.eth.getAccounts()\n  const from = accounts[0]\n\n  // Get chain id\n  const chainId = await web3.eth.net.getId()\n\n  if (chainId === 1)\n    tokenFactoryAddress = tokenFactoryAddress || MAINNET_MINIME_TOKEN_FACTORY\n\n  if (chainId === 4)\n    tokenFactoryAddress = tokenFactoryAddress || RINKEBY_MINIME_TOKEN_FACTORY\n\n  transferEnabled = parseArgumentStringIfPossible(transferEnabled)\n\n  return new TaskList(\n    [\n      {\n        title: 'Deploy the MiniMeTokenFactory contract',\n        enabled: () => !web3Utils.isAddress(tokenFactoryAddress),\n        task: async (ctx, task) => {\n          let artifact = getContract(\n            '@aragon/apps-shared-minime',\n            'MiniMeTokenFactory'\n          )\n          let contract = new web3.eth.Contract(artifact.abi)\n\n          const deployTx = contract.deploy({ data: artifact.bytecode })\n          const estimatedGas = await deployTx.estimateGas()\n\n          const deployPromise = deployTx.send({\n            from,\n            gas: await getRecommendedGasLimit(web3, estimatedGas),\n            gasPrice,\n          })\n\n          deployPromise\n            .on('receipt', function(receipt) {\n              ctx.factoryAddress = receipt.contractAddress\n            })\n            .on('transactionHash', transactionHash => {\n              ctx.factoryTxHash = transactionHash\n            })\n            .on('error', function(error) {\n              throw error\n            })\n\n          task.output = `Waiting for the transaction to be mined...`\n          return deployPromise\n        },\n      },\n      {\n        title: 'Deploy the MiniMeToken contract',\n        task: async (ctx, task) => {\n          let artifact = getContract(\n            '@aragon/apps-shared-minime',\n            'MiniMeToken'\n          )\n          let contract = new web3.eth.Contract(artifact.abi)\n\n          const deployTx = contract.deploy({\n            data: artifact.bytecode,\n            arguments: [\n              ctx.factoryAddress || tokenFactoryAddress,\n              ZERO_ADDRESS,\n              0,\n              tokenName,\n              decimalUnits,\n              symbol,\n              transferEnabled,\n            ],\n          })\n          const estimatedGas = await deployTx.estimateGas()\n\n          const deployPromise = deployTx.send({\n            from,\n            gas: await getRecommendedGasLimit(web3, estimatedGas),\n            gasPrice,\n          })\n\n          deployPromise\n            .on('receipt', function(receipt) {\n              ctx.tokenAddress = receipt.contractAddress\n            })\n            .on('transactionHash', transactionHash => {\n              ctx.tokenTxHash = transactionHash\n            })\n            .on('error', function(error) {\n              throw error\n            })\n\n          task.output = `Waiting for the transaction to be mined...`\n          return deployPromise\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n}\n\nexports.handler = async function({\n  reporter,\n  network,\n  gasPrice,\n  tokenName,\n  symbol,\n  transferEnabled,\n  decimalUnits,\n  tokenFactoryAddress,\n  silent,\n  debug,\n}) {\n  const web3 = await ensureWeb3(network)\n\n  const task = await exports.task({\n    web3,\n    gasPrice,\n    tokenName,\n    symbol,\n    transferEnabled,\n    decimalUnits,\n    tokenFactoryAddress,\n    silent,\n    debug,\n  })\n  return task.run().then(ctx => {\n    reporter.success(\n      `Successfully deployed the token at ${chalk.green(ctx.tokenAddress)}`\n    )\n    reporter.info(`Token transaction hash: ${chalk.blue(ctx.tokenTxHash)}`)\n\n    if (ctx.factoryAddress) {\n      reporter.success(\n        `Successfully deployed the token factory at ${chalk.green(\n          ctx.factoryAddress\n        )}`\n      )\n      reporter.info(\n        `Token factory transaction hash: ${chalk.blue(ctx.factoryTxHash)}`\n      )\n    }\n\n    process.exit()\n  })\n}\n"],"file":"new.js"}