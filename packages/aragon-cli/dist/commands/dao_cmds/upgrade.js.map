{"version":3,"sources":["../../../src/commands/dao_cmds/upgrade.js"],"names":["execTask","require","task","resolveEnsDomain","TaskList","daoArg","ensureWeb3","APM","defaultAPMName","chalk","startIPFS","getRepoTask","getContract","listrOpts","exports","command","describe","builder","yargs","args","wsProvider","web3","reporter","gasPrice","dao","network","apmOptions","apmRepo","apmRepoVersion","repo","silent","debug","ensRegistryAddress","apm","test","provider","currentProvider","registryAddress","tasks","title","bold","skip","ctx","kernel","eth","Contract","abi","methods","APP_BASES_NAMESPACE","call","basesNamespace","getTransactionPath","wrapper","fnArgs","appId","contractAddress","ipfsCheck","handler","run","then","success","blue","transactionPath","description","process","exit"],"mappings":"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","sourcesContent":["const execTask = require('./utils/execHandler').task\nconst { resolveEnsDomain } = require('./utils/aragonjs-wrapper')\nconst TaskList = require('listr')\nconst daoArg = require('./utils/daoArg')\nconst { ensureWeb3 } = require('../../helpers/web3-fallback')\nconst APM = require('@aragon/apm')\nconst defaultAPMName = require('@aragon/cli-utils/src/helpers/default-apm')\nconst chalk = require('chalk')\nconst startIPFS = require('../ipfs_cmds/start')\nconst getRepoTask = require('./utils/getRepoTask')\nconst { getContract } = require('../../util')\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\n\nexports.command = 'upgrade <dao> <apmRepo> [apmRepoVersion]'\n\nexports.describe = 'Upgrade an app into a DAO'\n\nexports.builder = function(yargs) {\n  return getRepoTask.args(daoArg(yargs))\n}\n\nexports.task = async ({\n  wsProvider,\n  web3,\n  reporter,\n  gasPrice,\n  dao,\n  network,\n  apmOptions,\n  apmRepo,\n  apmRepoVersion,\n  repo,\n  silent,\n  debug,\n}) => {\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n  const apm = await APM(web3, apmOptions)\n\n  apmRepo = defaultAPMName(apmRepo)\n  dao = /0x[a-fA-F0-9]{40}/.test(dao)\n    ? dao\n    : await resolveEnsDomain(dao, {\n        provider: web3.currentProvider,\n        registryAddress: apmOptions.ensRegistryAddress,\n      })\n\n  const tasks = new TaskList(\n    [\n      {\n        // IPFS is a dependency of getRepoTask which uses IPFS to fetch the contract ABI\n        title: 'Check IPFS',\n        task: () => startIPFS.task({ apmOptions }),\n      },\n      {\n        title: `Fetching ${chalk.bold(apmRepo)}@${apmRepoVersion}`,\n        skip: ctx => ctx.repo, // only run if repo isn't passed\n        task: getRepoTask.task({ apm, apmRepo, apmRepoVersion }),\n      },\n      {\n        title: 'Upgrading app',\n        task: async ctx => {\n          const kernel = new web3.eth.Contract(\n            getContract('@aragon/os', 'Kernel').abi,\n            dao\n          )\n\n          const basesNamespace = await kernel.methods\n            .APP_BASES_NAMESPACE()\n            .call()\n\n          const getTransactionPath = wrapper => {\n            const fnArgs = [\n              basesNamespace,\n              ctx.repo.appId,\n              ctx.repo.contractAddress,\n            ]\n            return wrapper.getTransactionPath(dao, 'setApp', fnArgs)\n          }\n\n          return execTask(dao, getTransactionPath, {\n            ipfsCheck: false,\n            reporter,\n            gasPrice,\n            apm: apmOptions,\n            web3,\n            wsProvider,\n          })\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n\n  return tasks\n}\n\nexports.handler = async function({\n  reporter,\n  dao,\n  gasPrice,\n  network,\n  wsProvider,\n  apm: apmOptions,\n  apmRepo,\n  apmRepoVersion,\n  silent,\n  debug,\n}) {\n  const web3 = await ensureWeb3(network)\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n\n  const task = await exports.task({\n    web3,\n    reporter,\n    dao,\n    gasPrice,\n    network,\n    apmOptions,\n    apmRepo,\n    apmRepoVersion,\n    wsProvider,\n    silent,\n    debug,\n  })\n\n  return task.run().then(ctx => {\n    reporter.success(\n      `Successfully executed: \"${chalk.blue(\n        ctx.transactionPath[0].description\n      )}\"`\n    )\n    process.exit()\n  })\n}\n"],"file":"upgrade.js"}