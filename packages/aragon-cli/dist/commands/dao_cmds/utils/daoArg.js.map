{"version":3,"sources":["../../../../src/commands/dao_cmds/utils/daoArg.js"],"names":["isAddress","addr","test","isValidAragonID","dao","module","exports","yargs","positional","description","type","coerce"],"mappings":";;AAAA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAAAC,IAAI;AAAA,SAAI,oBAAoBC,IAApB,CAAyBD,IAAzB,CAAJ;AAAA,CAAtB;;AACA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,GAAG;AAAA,SAAI,iBAAiBF,IAAjB,CAAsBE,GAAtB,CAAJ;AAAA,CAA3B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAAC,KAAK,EAAI;AACxB,SAAOA,KAAK,CAACC,UAAN,CAAiB,KAAjB,EAAwB;AAC7BC,IAAAA,WAAW,EAAE,mCADgB;AAE7BC,IAAAA,IAAI,EAAE,QAFuB;AAG7BC,IAAAA,MAAM,EAAE,gBAAAP,GAAG;AAAA,aACT,CAACJ,SAAS,CAACI,GAAD,CAAV,IAAmB,CAACD,eAAe,CAACC,GAAD,CAAnC,aACOA,GADP,mBAC0B;AAD1B,QAEIA,GAHK;AAAA;AAHkB,GAAxB,CAAP;AAQD,CATD","sourcesContent":["const isAddress = addr => /0x[a-fA-F0-9]{40}/.test(addr)\nconst isValidAragonID = dao => /[a-z0-9]+\\.eth/.test(dao)\n\nmodule.exports = yargs => {\n  return yargs.positional('dao', {\n    description: 'Address of the Kernel or AragonID',\n    type: 'string',\n    coerce: dao =>\n      !isAddress(dao) && !isValidAragonID(dao)\n        ? `${dao}.aragonid.eth` // append aragonid.eth if needed\n        : dao,\n  })\n}\n"],"file":"daoArg.js"}