{"version":3,"sources":["../../../../src/commands/dao_cmds/utils/execHandler.js"],"names":["chalk","require","startIPFS","TaskList","ensureWeb3","listrOpts","exports","task","dao","getTransactionPath","ipfsCheck","reporter","apm","web3","wsProvider","gasPrice","silent","debug","eth","getAccounts","accounts","title","apmOptions","enabled","ctx","output","Promise","resolve","reject","wrapper","appsLoaded","tryFindTransactionPath","transactionPath","ipfsConf","ipfs","provider","currentProvider","onApps","apps","onError","err","then","initializedWrapper","error","process","exit","tx","Error","sendTransaction","receipt","handler","args","network","tasks","run","success","blue","description"],"mappings":"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","sourcesContent":["import initAragonJS from './aragonjs-wrapper'\nconst chalk = require('chalk')\nconst startIPFS = require('../../ipfs_cmds/start')\nconst TaskList = require('listr')\nconst { ensureWeb3 } = require('../../../helpers/web3-fallback')\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\n\nexports.task = async function(\n  dao,\n  getTransactionPath,\n  { ipfsCheck, reporter, apm, web3, wsProvider, gasPrice, silent, debug }\n) {\n  const accounts = await web3.eth.getAccounts()\n  return new TaskList(\n    [\n      {\n        // IPFS is a dependency of getRepoTask which uses IPFS to fetch the contract ABI\n        title: 'Check IPFS',\n        task: () => startIPFS.task({ apmOptions: apm }),\n        enabled: () => ipfsCheck,\n      },\n      {\n        title: 'Generating transaction',\n        task: async (ctx, task) => {\n          task.output = `Fetching DAO at ${dao}...`\n\n          return new Promise((resolve, reject) => {\n            let wrapper, appsLoaded\n\n            const tryFindTransactionPath = async () => {\n              if (appsLoaded && wrapper && !ctx.transactionPath) {\n                try {\n                  ctx.transactionPath = await getTransactionPath(wrapper)\n                  resolve()\n                } catch (e) {\n                  reject(e)\n                }\n              }\n            }\n\n            initAragonJS(dao, apm['ens-registry'], {\n              ipfsConf: apm.ipfs,\n              gasPrice,\n              provider: wsProvider || web3.currentProvider,\n              accounts,\n              onApps: async apps => {\n                appsLoaded = true\n                await tryFindTransactionPath()\n              },\n              onError: err => reject(err),\n            })\n              .then(async initializedWrapper => {\n                wrapper = initializedWrapper\n                await tryFindTransactionPath()\n              })\n              .catch(err => {\n                reporter.error('Error inspecting DAO')\n                reporter.debug(err)\n                process.exit(1)\n              })\n          })\n        },\n      },\n      {\n        title: `Sending transaction`,\n        task: async (ctx, task) => {\n          // aragon.js already calculates the recommended gas\n          let tx = ctx.transactionPath[0] // TODO: Support choosing between possible transaction paths\n\n          if (!tx) {\n            throw new Error('Cannot find transaction path for executing action')\n          }\n\n          task.output = `Waiting for transaction to be mined...`\n          ctx.receipt = await web3.eth.sendTransaction(ctx.transactionPath[0])\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n}\n\nexports.handler = async function(dao, getTransactionPath, args) {\n  args = {\n    ...args,\n    web3: await ensureWeb3(args.network),\n  }\n\n  const tasks = await exports.task(dao, getTransactionPath, args)\n\n  return tasks.run().then(ctx => {\n    args.reporter.success(\n      `Successfully executed: \"${chalk.blue(\n        ctx.transactionPath[0].description\n      )}\"`\n    )\n    process.exit()\n  })\n}\n"],"file":"execHandler.js"}