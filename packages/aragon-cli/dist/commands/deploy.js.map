{"version":3,"sources":["../../src/commands/deploy.js"],"names":["path","require","TaskList","chalk","compileContracts","findProjectRoot","ensureWeb3","deployArtifacts","listrOpts","getRecommendedGasLimit","exports","command","describe","arappContract","contractPath","resolve","contractName","basename","split","builder","yargs","positional","description","option","array","task","network","gasPrice","cwd","contract","init","web3","apmOptions","silent","debug","ensRegistryAddress","mappingMask","key","mappings","processedInit","map","value","tasks","title","ctx","contractArtifacts","join","Error","abi","bytecode","output","eth","Contract","data","getAccounts","accounts","deployTx","deploy","arguments","estimateGas","gas","args","from","deployPromise","send","on","transactionHash","instance","options","address","contractInstance","handler","reporter","apm","run","success","blue","green","info","process","exit"],"mappings":"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","sourcesContent":["const path = require('path')\nconst TaskList = require('listr')\nconst chalk = require('chalk')\n\nconst { compileContracts } = require('../helpers/truffle-runner')\nconst { findProjectRoot } = require('../util')\nconst { ensureWeb3 } = require('../helpers/web3-fallback')\nconst deployArtifacts = require('../helpers/truffle-deploy-artifacts')\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\nconst { getRecommendedGasLimit } = require('../util')\n\nexports.command = 'deploy [contract]'\n\nexports.describe = 'Deploys contract code of the app to the chain'\n\nexports.arappContract = () => {\n  const contractPath = require(path.resolve(findProjectRoot(), 'arapp.json'))\n    .path\n  const contractName = path.basename(contractPath).split('.')[0]\n\n  return contractName\n}\n\nexports.builder = yargs => {\n  return yargs\n    .positional('contract', {\n      description:\n        'Contract name (defaults to the contract at the path in arapp.json)',\n    })\n    .option('init', {\n      description: 'Arguments to be passed to contract constructor',\n      array: true,\n      default: [],\n    })\n}\n\nexports.task = async ({\n  network,\n  gasPrice,\n  cwd,\n  contract,\n  init,\n  web3,\n  apmOptions,\n  silent,\n  debug,\n}) => {\n  if (!contract) {\n    contract = exports.arappContract()\n  }\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n\n  if (!web3) {\n    web3 = await ensureWeb3(network)\n  }\n\n  init = init || []\n\n  // Mappings allow to pass certain init parameters that get replaced for their actual value\n  const mappingMask = key => `@ARAGON_${key}`\n  const mappings = {\n    [mappingMask('ENS')]: () => apmOptions.ensRegistryAddress, // <ens> to ens addr\n  }\n  const processedInit = init.map(value =>\n    mappings[value] ? mappings[value]() : value\n  )\n\n  const contractName = contract\n  const tasks = new TaskList(\n    [\n      {\n        title: 'Compile contracts',\n        task: async () => {\n          await compileContracts()\n        },\n      },\n      {\n        title: `Deploy '${contractName}' to network`,\n        task: async (ctx, task) => {\n          ctx.contractName = contractName\n          try {\n            ctx.contractArtifacts = require(path.join(\n              cwd,\n              'build/contracts',\n              contractName\n            ))\n          } catch (e) {\n            throw new Error(\n              'Contract artifact couldnt be found. Please ensure your contract name is the same as the filename.'\n            )\n          }\n\n          const { abi, bytecode } = ctx.contractArtifacts\n\n          if (!bytecode || bytecode === '0x') {\n            throw new Error(\n              'Contract bytecode couldnt be generated. Contracts that dont implement all interface methods cant be deployed'\n            )\n          }\n\n          task.output = `Deploying '${contractName}' to network`\n\n          const contract = new web3.eth.Contract(abi, { data: bytecode })\n          const accounts = await web3.eth.getAccounts()\n\n          const deployTx = contract.deploy({ arguments: processedInit })\n          const gas = await getRecommendedGasLimit(\n            web3,\n            await deployTx.estimateGas()\n          )\n\n          const args = {\n            from: accounts[0],\n            gasPrice: network.gasPrice || gasPrice,\n            gas,\n          }\n\n          const deployPromise = deployTx.send(args)\n          deployPromise.on('transactionHash', transactionHash => {\n            ctx.transactionHash = transactionHash\n          })\n          const instance = await deployPromise\n\n          if (!instance.options.address) {\n            throw new Error('Contract deployment failed')\n          }\n\n          ctx.contractInstance = instance\n          ctx.contract = instance.options.address\n          return ctx.contract\n        },\n      },\n      {\n        title: 'Generate deployment artifacts',\n        task: async (ctx, task) => {\n          ctx.deployArtifacts = await deployArtifacts(ctx.contractArtifacts)\n          ctx.deployArtifacts.transactionHash = ctx.transactionHash\n          delete ctx.transactionHash\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n\n  return tasks\n}\n\nexports.handler = async ({\n  reporter,\n  gasPrice,\n  network,\n  cwd,\n  contract,\n  init,\n  apm: apmOptions,\n  silent,\n  debug,\n}) => {\n  const task = await exports.task({\n    gasPrice,\n    network,\n    cwd,\n    contract,\n    init,\n    apmOptions,\n    silent,\n    debug,\n  })\n  const ctx = await task.run()\n\n  reporter.success(\n    `Successfully deployed ${chalk.blue(ctx.contractName)} at: ${chalk.green(\n      ctx.contract\n    )}`\n  )\n  reporter.info(\n    `Transaction hash: ${chalk.blue(ctx.deployArtifacts.transactionHash)}`\n  )\n\n  process.exit()\n}\n"],"file":"deploy.js"}