{"version":3,"sources":["../../../src/commands/ipfs_cmds/install.js"],"names":["exports","command","describe","builder","yargs","option","description","runPrepareTask","silent","debug","local","TaskList","title","task","ctx","NODE_OS","process","platform","NODE_ARCH","arch","GO_OS","goplatform","GOOS","GO_ARCH","GOARCH","location","cwd","packageFile","chalk","red","currentLocation","Error","stdout","Object","assign","concurrent","run","runInstallTask","distUrl","distVersion","npmBinary","exacaOptions","env","GO_IPFS_DIST_URL","npmArgs","push","logPrefix","join","installProcess","on","data","output","stderr","includes","handler","reporter","skipConfirmation","existingBinaryLocation","error","newLine","uninstallCommand","warning","yellow","exit","info","actualVersion","replace","distName","blue","inquirer","prompt","type","name","message","green","confirmation","success"],"mappings":"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","sourcesContent":["import TaskList from 'listr'\nimport execa from 'execa'\nimport goplatform from 'go-platform'\nimport inquirer from 'inquirer'\nimport { existsSync } from 'fs'\nimport chalk from 'chalk'\n//\nimport listrOpts from '@aragon/cli-utils/src/helpers/listr-options'\nimport {\n  getNodePackageManager,\n  getGlobalBinary,\n  getLocalBinary,\n} from '../../util'\n\nexports.command = 'install'\nexports.describe = 'Download and install the go-ipfs binaries.'\n\nexports.builder = yargs => {\n  return yargs\n    .option('dist-version', {\n      description: 'The version of IPFS that will be installed',\n      default: '0.4.22',\n    })\n    .option('dist-url', {\n      description: 'The url from which to download IPFS',\n      default: 'https://dist.ipfs.io',\n    })\n    .option('local', {\n      description: 'Whether to install IPFS as a project dependency',\n      boolean: true,\n      default: false,\n    })\n    .option('skip-confirmation', {\n      description: 'Whether to skip the confirmation step',\n      boolean: true,\n      default: false,\n    })\n}\n\nconst runPrepareTask = ({ silent, debug, local }) => {\n  return new TaskList(\n    [\n      {\n        title: 'Determine platform and architecture',\n        task: ctx => {\n          ctx.NODE_OS = process.platform\n          ctx.NODE_ARCH = process.arch\n        },\n      },\n      {\n        title: 'Determine golang distribution',\n        task: ctx => {\n          ctx.GO_OS = goplatform.GOOS\n          ctx.GO_ARCH = goplatform.GOARCH\n        },\n      },\n      {\n        title: 'Determine location',\n        task: async ctx => {\n          if (local) {\n            ctx.location = process.cwd()\n            if (!existsSync('./package.json')) {\n              const packageFile = chalk.red('package.json')\n              const currentLocation = chalk.red(ctx.location)\n              throw new Error(\n                `${currentLocation} does not have a ${packageFile}. Did you wish to install IPFS globally?`\n              )\n            }\n          } else {\n            ctx.location = (await execa('npm', ['prefix', '--global'])).stdout\n          }\n        },\n      },\n    ],\n    Object.assign({ concurrent: true }, listrOpts(silent, debug))\n  ).run()\n}\n\nconst runInstallTask = ({ silent, debug, local, distUrl, distVersion }) => {\n  return new TaskList(\n    [\n      {\n        title: 'Install IPFS',\n        task: async task => {\n          const npmBinary = getNodePackageManager()\n          const exacaOptions = {\n            env: {\n              /*\n               *  https://github.com/ipfs/npm-go-ipfs-dep/blob/v0.4.21/src/index.js#L71\n               */\n              GO_IPFS_DIST_URL: distUrl,\n              /*\n               *  specifying `TARGET_VERSION` here, will throw an error, because:\n               *  https://github.com/ipfs/npm-go-ipfs/blob/master/link-ipfs.js#L49\n               */\n              // TARGET_VERSION: distVersion\n            },\n          }\n          const npmArgs = ['install', `go-ipfs@${distVersion}`]\n\n          if (local) {\n            npmArgs.push('--save')\n          } else {\n            npmArgs.push('--global')\n          }\n\n          const logPrefix = `npm ${npmArgs.join(' ')}:`\n          const installProcess = execa(npmBinary, npmArgs, exacaOptions)\n\n          installProcess.stdout.on('data', data => {\n            if (data) task.output = `${logPrefix} ${data}`\n          })\n\n          try {\n            await installProcess\n          } catch (execaResult) {\n            if (execaResult.stderr.includes('No matching version found')) {\n              throw new Error(\n                `NPM cannot find version ${distVersion}. For more versions see: http://npmjs.com/package/go-ipfs?activeTab=versions`\n              )\n            } else {\n              throw new Error(execaResult.stderr)\n            }\n          }\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  ).run()\n}\n\nexports.handler = async function({\n  debug,\n  silent,\n  distVersion,\n  distUrl,\n  local,\n  reporter,\n  skipConfirmation,\n}) {\n  /**\n   * Check if it's already installed\n   */\n  const existingBinaryLocation = local\n    ? getLocalBinary('ipfs', process.cwd())\n    : getGlobalBinary('ipfs')\n\n  if (existingBinaryLocation) {\n    reporter.error(\n      'IPFS is already installed:',\n      chalk.red(existingBinaryLocation)\n    )\n    reporter.newLine()\n\n    const uninstallCommand = local\n      ? 'aragon ipfs uninstall --local'\n      : 'aragon ipfs uninstall'\n    reporter.warning(\n      'To install a different version, you must first run:',\n      chalk.yellow(uninstallCommand)\n    )\n\n    if (!local) {\n      reporter.warning(\n        'To install IPFS in a project, use the --local flag:',\n        chalk.yellow('aragon ipfs install --local')\n      )\n    }\n    return process.exit(1)\n  }\n\n  /**\n   * Prepare confirmation details\n   */\n  reporter.info('Preparing:')\n  const { NODE_OS, NODE_ARCH, GO_OS, GO_ARCH, location } = await runPrepareTask(\n    {\n      debug,\n      silent,\n      local,\n    }\n  )\n\n  // https://github.com/ipfs/npm-go-ipfs/blob/master/link-ipfs.js#L8\n  // https://github.com/ipfs/npm-go-ipfs#publish-a-new-version-of-this-module-with-exact-same-go-ipfs-version\n  const actualVersion = distVersion.replace(/-hacky[0-9]+/, '')\n  const distName = `go-ipfs_v${actualVersion}_${GO_OS}-${GO_ARCH}.tar.gz`\n\n  reporter.newLine()\n  reporter.info(\n    `Platform & architecture: ${chalk.blue(NODE_OS)}, ${chalk.blue(NODE_ARCH)}`\n  )\n  reporter.info(`IPFS tarball: ${chalk.blue(distName)}`)\n  reporter.info(`IPFS distributions url: ${chalk.blue(distUrl)}`)\n  reporter.info(`NPM version: ${chalk.blue(distVersion)}`)\n  reporter.info(`Location: ${chalk.blue(location)}`)\n\n  /**\n   * Confirm & install\n   */\n  reporter.newLine()\n  if (!skipConfirmation) {\n    const { confirmation } = await inquirer.prompt([\n      {\n        type: 'confirm',\n        name: 'confirmation',\n        message: `Are you sure you want to ${chalk.green('install IPFS')}?`,\n      },\n    ])\n    if (!confirmation) return\n  }\n\n  await runInstallTask({\n    debug,\n    silent,\n    distUrl,\n    distVersion,\n    local,\n  })\n\n  reporter.newLine()\n  reporter.success('Success!')\n  reporter.info(\n    `Try it out with: ${chalk.blue(\n      local ? 'npx ipfs version' : 'ipfs version'\n    )}`\n  )\n}\n"],"file":"install.js"}