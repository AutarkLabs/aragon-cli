{"version":3,"sources":["../../../src/commands/ipfs_cmds/propagate.js"],"names":["chalk","require","startIPFS","exports","command","describe","builder","yargs","positional","description","task","apmOptions","silent","debug","cid","TaskList","title","ctx","ipfs","rpc","client","recursive","data","CIDs","logger","text","output","result","handler","reporter","apm","run","console","log","blue","length","gateways","green","succeeded","red","failed","join","errors","map","JSON","stringify","process","exit"],"mappings":"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","sourcesContent":["import TaskList from 'listr'\n//\nimport {\n  ensureConnection,\n  getMerkleDAG,\n  extractCIDsFromMerkleDAG,\n  propagateFiles,\n} from '../../lib/ipfs'\nimport listrOpts from '@aragon/cli-utils/src/helpers/listr-options'\n\nconst chalk = require('chalk')\nconst startIPFS = require('./start')\n\nexports.command = 'propagate <cid>'\nexports.describe =\n  'Request the content and its links at several gateways, making the files more distributed within the network.'\n\nexports.builder = yargs => {\n  return yargs.positional('cid', {\n    description: 'A self-describing content-addressed identifier',\n  })\n}\n\nexports.task = ({ apmOptions, silent, debug, cid }) => {\n  return new TaskList(\n    [\n      {\n        title: 'Check IPFS',\n        task: () => startIPFS.task({ apmOptions }),\n      },\n      {\n        title: 'Connect to IPFS',\n        task: async ctx => {\n          ctx.ipfs = await ensureConnection(apmOptions.ipfs.rpc)\n        },\n      },\n      {\n        title: 'Fetch the links',\n        task: async ctx => {\n          ctx.data = await getMerkleDAG(ctx.ipfs.client, cid, {\n            recursive: true,\n          })\n        },\n      },\n      {\n        title: 'Query gateways',\n        task: async (ctx, task) => {\n          ctx.CIDs = extractCIDsFromMerkleDAG(ctx.data, {\n            recursive: true,\n          })\n\n          const logger = text => (task.output = text)\n          ctx.result = await propagateFiles(ctx.CIDs, logger)\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n}\n\nexports.handler = async function({\n  reporter,\n  apm: apmOptions,\n  cid,\n  debug,\n  silent,\n}) {\n  const task = await exports.task({\n    apmOptions,\n    cid,\n    debug,\n    silent,\n  })\n\n  const ctx = await task.run()\n\n  console.log(\n    '\\n',\n    `Queried ${chalk.blue(ctx.CIDs.length)} CIDs at ${chalk.blue(\n      ctx.result.gateways.length\n    )} gateways`,\n    '\\n',\n    `Requests succeeded: ${chalk.green(ctx.result.succeeded)}`,\n    '\\n',\n    `Requests failed: ${chalk.red(ctx.result.failed)}`,\n    '\\n'\n  )\n\n  reporter.debug(`Gateways: ${ctx.result.gateways.join(', ')}`)\n  reporter.debug(\n    `Errors: \\n${ctx.result.errors.map(JSON.stringify).join('\\n')}`\n  )\n  // TODO add your own gateways\n  process.exit()\n}\n"],"file":"propagate.js"}