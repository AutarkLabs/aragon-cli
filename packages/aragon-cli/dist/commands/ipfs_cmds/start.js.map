{"version":3,"sources":["../../../src/commands/ipfs_cmds/start.js"],"names":["path","require","TaskList","chalk","startIPFSDaemon","isIPFSCORS","setIPFSCORS","isIPFSRunning","IPFS","listrOpts","exports","command","describe","task","apmOptions","silent","debug","title","ctx","ipfs","rpc","running","output","port","started","protocol","files","resolve","Promise","reject","util","addFromFs","recursive","ignore","err","handler","reporter","apm","run","info","warning","yellow","process","exit"],"mappings":"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","sourcesContent":["const path = require('path')\nconst TaskList = require('listr')\nconst chalk = require('chalk')\nconst {\n  startIPFSDaemon,\n  isIPFSCORS,\n  setIPFSCORS,\n  isIPFSRunning,\n} = require('../../helpers/ipfs-daemon')\n\nconst IPFS = require('ipfs-api')\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\n\nexports.command = 'start'\nexports.describe = 'Start the IPFS daemon and configure it to work with Aragon.'\n\nexports.task = ({ apmOptions, silent, debug }) => {\n  return new TaskList(\n    [\n      {\n        title: 'Start IPFS',\n        task: async (ctx, task) => {\n          // If the dev manually set their IPFS node, skip install and running check\n          if (apmOptions.ipfs.rpc.default) {\n            const running = await isIPFSRunning(apmOptions.ipfs.rpc)\n            if (!running) {\n              task.output = 'Starting IPFS at port: ' + apmOptions.ipfs.rpc.port\n              await startIPFSDaemon()\n              ctx.started = true\n              await setIPFSCORS(apmOptions.ipfs.rpc)\n            } else {\n              task.output = 'IPFS is started, checking CORS config'\n              await setIPFSCORS(apmOptions.ipfs.rpc)\n              return (\n                'Connected to IPFS daemon at port: ' + apmOptions.ipfs.rpc.port\n              )\n            }\n          } else {\n            await isIPFSCORS(apmOptions.ipfs.rpc)\n            return 'Connecting to provided IPFS daemon'\n          }\n        },\n      },\n      {\n        title: 'Add local files',\n        task: ctx => {\n          const ipfs = IPFS('localhost', '5001', { protocol: 'http' })\n          const files = path.resolve(\n            require.resolve('@aragon/aragen'),\n            '../ipfs-cache'\n          )\n\n          return new Promise((resolve, reject) => {\n            ipfs.util.addFromFs(\n              files,\n              { recursive: true, ignore: 'node_modules' },\n              (err, files) => {\n                if (err) return reject(err)\n                resolve(files)\n              }\n            )\n          })\n        },\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n}\n\nexports.handler = async function({ reporter, apm: apmOptions }) {\n  const task = exports.task({ apmOptions })\n\n  const ctx = await task.run()\n\n  if (ctx.started) {\n    reporter.info(\n      'IPFS daemon is now running. Stopping this process will stop IPFS'\n    )\n  } else {\n    reporter.warning(chalk.yellow(\"Didn't start IPFS, port busy\"))\n    process.exit()\n  }\n}\n"],"file":"start.js"}