{"version":3,"sources":["../../../src/commands/ipfs_cmds/status.js"],"names":["exports","command","describe","builder","yargs","option","description","runCheckTask","silent","debug","repoPath","TaskList","title","task","ctx","localBinPath","process","cwd","globalBinPath","repoExists","Promise","all","version","size","config","repoVersion","repoSize","peerID","daemonPorts","skip","protocol","host","port","api","daemonRunning","corsEnabled","publicIp","v4","internalIp","publicIP","internalIP","publicSwarmMultiAddr","internalSwarmMultiAddr","localSwarmMultiAddr","run","handler","reporter","info","chalk","blue","newLine","bgWhite","black","green","red","gateway","swarm"],"mappings":"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","sourcesContent":["import TaskList from 'listr'\nimport chalk from 'chalk'\nimport publicIp from 'public-ip'\nimport internalIp from 'internal-ip'\nimport { existsSync } from 'fs'\n//\nimport listrOpts from '@aragon/cli-utils/src/helpers/listr-options'\nimport { getGlobalBinary, getLocalBinary } from '../../util'\nimport {\n  getRepoVersion,\n  getDefaultRepoPath,\n  getRepoConfig,\n  getPortsConfig,\n  getPeerIDConfig,\n  isDaemonRunning,\n  getRepoSize,\n} from '../../lib/ipfs'\nimport { isIPFSCORS } from '../../helpers/ipfs-daemon'\n\nexports.command = 'status'\nexports.describe = 'Status of the IPFS installation & daemon.'\n\nexports.builder = yargs => {\n  return yargs.option('repo-path', {\n    description: 'The location of the IPFS repository',\n    default: getDefaultRepoPath(),\n  })\n}\n\nconst runCheckTask = ({ silent, debug, repoPath }) => {\n  return new TaskList(\n    [\n      {\n        title: 'Check installations',\n        task: ctx => {\n          ctx.localBinPath = getLocalBinary('ipfs', process.cwd())\n          ctx.globalBinPath = getGlobalBinary('ipfs')\n        },\n      },\n      {\n        title: 'Check repository',\n        task: async ctx => {\n          ctx.repoExists = existsSync(repoPath)\n          if (!ctx.repoExists) return\n\n          const [version, size, config] = await Promise.all([\n            getRepoVersion(repoPath),\n            getRepoSize(repoPath),\n            getRepoConfig(repoPath),\n          ])\n\n          ctx.repoVersion = version\n          ctx.repoSize = size\n          ctx.peerID = getPeerIDConfig(config)\n          ctx.daemonPorts = getPortsConfig(config)\n        },\n      },\n      {\n        title: 'Check the daemon',\n        skip: ctx => !ctx.repoExists,\n        task: async ctx => {\n          ctx.daemonRunning = await isDaemonRunning({\n            protocol: 'http',\n            host: '127.0.0.1',\n            port: ctx.daemonPorts.api,\n          })\n        },\n      },\n      {\n        title: 'Check CORS',\n        skip: ctx => !ctx.daemonRunning,\n        task: async ctx => {\n          ctx.corsEnabled = await isIPFSCORS({\n            protocol: 'http',\n            host: '127.0.0.1',\n            port: ctx.daemonPorts.api,\n          })\n        },\n      },\n      {\n        title: 'Check MultiAddresses',\n        skip: ctx => !ctx.daemonRunning,\n        task: async ctx => {\n          const [publicIP, internalIP] = await Promise.all([\n            publicIp.v4(),\n            internalIp.v4(),\n          ])\n\n          ctx.publicSwarmMultiAddr =\n            '/ip4/' + publicIP + '/tcp/4001/ipfs' + ctx.peerID\n          ctx.internalSwarmMultiAddr =\n            '/ip4/' + internalIP + '/tcp/4001/ipfs' + ctx.peerID\n          ctx.localSwarmMultiAddr =\n            '/ip4/' + '127.0.0.1' + '/tcp/4001/ipfs' + ctx.peerID\n        },\n      },\n      // Other possible checks:\n      // Whether the gateway is open to the public ??\n      // Whether the API is open to the public??\n      // StorageMax\n    ],\n    listrOpts(silent, debug)\n  ).run()\n}\n\nexports.handler = async function({ reporter, debug, silent, repoPath }) {\n  const {\n    localBinPath,\n    globalBinPath,\n    repoVersion,\n    repoSize,\n    peerID,\n    daemonPorts,\n    daemonRunning,\n    corsEnabled,\n    publicSwarmMultiAddr,\n    internalSwarmMultiAddr,\n    localSwarmMultiAddr,\n    repoExists,\n  } = await runCheckTask({\n    silent,\n    debug,\n    repoPath,\n  })\n\n  reporter.info(\n    `Local installation: ${chalk.blue(localBinPath || 'not installed')}`\n  )\n  reporter.info(\n    `Global installation: ${chalk.blue(globalBinPath || 'not installed')}`\n  )\n\n  reporter.newLine()\n  if (repoExists) {\n    reporter.info(`Repository location: ${chalk.blue(repoPath)}`)\n    reporter.info(`Repository version: ${chalk.blue(repoVersion)}`)\n    reporter.info(`Repository size: ${chalk.blue(repoSize)}`)\n    reporter.newLine()\n    reporter.info(`PeerID: ${chalk.bgWhite(chalk.black(peerID))}`)\n    reporter.info(\n      `Daemon: ${daemonRunning ? chalk.green('running') : chalk.red('stopped')}`\n    )\n  } else {\n    reporter.info(`Repository: ${chalk.red('uninitialized')}`)\n  }\n\n  if (daemonRunning) {\n    reporter.info(\n      `CORS: ${corsEnabled ? chalk.green('enabled') : chalk.red('disabled')}`\n    )\n    reporter.newLine()\n    reporter.info(`API port: ${chalk.blue(daemonPorts.api)}`)\n    reporter.info(`Gateway port: ${chalk.blue(daemonPorts.gateway)}`)\n    reporter.info(`Swarm port: ${chalk.blue(daemonPorts.swarm)}`)\n    reporter.newLine()\n    reporter.info(\n      `Public Swarm MultiAddress: ${chalk.blue(publicSwarmMultiAddr)}`\n    )\n    reporter.info(\n      `Internal Swarm MultiAddress: ${chalk.blue(internalSwarmMultiAddr)}`\n    )\n    reporter.info(\n      `Local Swarm MultiAddress: ${chalk.blue(localSwarmMultiAddr)}`\n    )\n  }\n}\n"],"file":"status.js"}