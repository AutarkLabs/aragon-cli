{"version":3,"sources":["../../src/commands/run.js"],"names":["TaskList","require","Web3","chalk","path","devchain","start","deploy","newDAO","startIPFS","encodeInitPayload","fs","pkg","listrOpts","APM","getRepoTask","runSetupTask","runPrepareForPublishTask","runPublishTask","findProjectRoot","isPortTaken","url","DEFAULT_CLIENT_REPO","aragon","clientRepo","DEFAULT_CLIENT_VERSION","clientVersion","DEFAULT_CLIENT_PORT","clientPort","exports","command","describe","builder","yargs","option","description","array","BARE_TEMPLATE","BARE_TEMPLATE_DEPLOY_EVENT","BARE_INSTANCE_FUNCTION","type","handler","reporter","gasPrice","cwd","apmOptions","apm","silent","debug","network","module","client","files","port","networkId","blockTime","accounts","reset","kit","kitInit","kitDeployEvent","template","templateInit","templateDeployEvent","templateNewInstance","templateArgs","build","buildScript","publishDir","prepublish","prepublishScript","bump","http","httpServedFrom","appInit","appInitArgs","clientPath","ensRegistryAddress","showAccounts","tasks","title","skip","ctx","hostURL","URL","provider","connection","_url","web3","eth","getAccounts","task","enabled","publishParams","ignore","contract","arappContract","initialRepo","initialVersion","version","contractAddress","deployArtifacts","intent","dao","proxyAddress","methodName","params","apmRepo","appName","artifactRequired","deployParams","init","roles","repo","rolesBytes","map","role","bytes","fnArgs","contractInstance","initPayload","abi","notInitialized","appId","newDAOParams","templateVersion","templateInstance","fn","deployEvent","manifestPath","resolve","manifest","existsSync","readJsonSync","run","ens","then","portOpen","warning","blue","length","normalize","newLine","info","privateKeys","printAccounts","mnemonic","printMnemonic","printResetNotice","registry","split","slice","join","green","daoAddress","bold","start_url"],"mappings":"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","sourcesContent":["const TaskList = require('listr')\nconst Web3 = require('web3')\nconst chalk = require('chalk')\nconst path = require('path')\nconst devchain = require('./devchain_cmds/start')\nconst start = require('./start')\nconst deploy = require('./deploy')\nconst newDAO = require('./dao_cmds/new')\nconst startIPFS = require('./ipfs_cmds/start')\nconst encodeInitPayload = require('./dao_cmds/utils/encodeInitPayload')\nconst fs = require('fs-extra')\nconst pkg = require('../../package.json')\nconst listrOpts = require('@aragon/cli-utils/src/helpers/listr-options')\nconst APM = require('@aragon/apm')\nconst getRepoTask = require('./dao_cmds/utils/getRepoTask')\n\nconst {\n  runSetupTask,\n  runPrepareForPublishTask,\n  runPublishTask,\n} = require('./apm_cmds/publish')\n\nconst { findProjectRoot, isPortTaken } = require('../util')\n\nconst url = require('url')\n\nconst DEFAULT_CLIENT_REPO = pkg.aragon.clientRepo\nconst DEFAULT_CLIENT_VERSION = pkg.aragon.clientVersion\nconst DEFAULT_CLIENT_PORT = pkg.aragon.clientPort\n\nexports.command = 'run'\n\nexports.describe = 'Run the current app locally'\n\nexports.builder = function(yargs) {\n  return yargs\n    .option('client', {\n      description: 'Just run the smart contracts, without the Aragon client',\n      default: true,\n      boolean: true,\n    })\n    .option('files', {\n      description:\n        'Path(s) to directories containing files to publish. Specify multiple times to include multiple files.',\n      default: ['.'],\n      array: true,\n    })\n    .option('port', {\n      description: 'Port to start devchain at',\n      default: '8545',\n    })\n    .option('network-id', {\n      description: 'Network id to connect with',\n    })\n    .option('block-time', {\n      description: 'Specify blockTime in seconds for automatic mining',\n    })\n    .option('accounts', {\n      default: 2,\n      description: 'Number of accounts to print',\n    })\n    .option('reset', {\n      default: false,\n      boolean: true,\n      description: 'Reset devchain to snapshot',\n    })\n    .option('kit', {\n      description: '(deprecated) Kit contract name',\n    })\n    .option('kit-init', {\n      description: '(deprecated) Arguments to be passed to the kit constructor',\n      array: true,\n    })\n    .option('kit-deploy-event', {\n      description:\n        '(deprecated) Event name that the template will fire on success',\n    })\n    .option('template', {\n      default: newDAO.BARE_TEMPLATE,\n      description: 'Template contract name',\n    })\n    .option('template-init', {\n      description: 'Arguments to be passed to the template constructor',\n      array: true,\n      default: [],\n    })\n    .option('template-deploy-event', {\n      description: 'Event name that the template will fire on success',\n      default: newDAO.BARE_TEMPLATE_DEPLOY_EVENT,\n    })\n    .option('template-new-instance', {\n      description: 'Function to be called to create template instance',\n      default: newDAO.BARE_INSTANCE_FUNCTION,\n    })\n    .option('template-args', {\n      description:\n        'Arguments to be passed to the function specified in --template-new-instance',\n      array: true,\n      default: [],\n    })\n    .option('build', {\n      description:\n        'Whether publish should try to build the app before publishing, running the script specified in --build-script',\n      default: true,\n      boolean: true,\n    })\n    .option('build-script', {\n      description: 'The npm script that will be run when building the app',\n      default: 'build',\n    })\n    .option('publish-dir', {\n      description:\n        'Temporary directory where files will be copied before publishing. Defaults to temp dir.',\n      default: null,\n    })\n    .option('prepublish', {\n      description:\n        'Whether publish should run prepublish script specified in --prepublish-script before publishing',\n      default: true,\n      boolean: true,\n    })\n    .option('prepublish-script', {\n      description: 'The npm script that will be run before publishing the app',\n      default: 'prepublishOnly',\n    })\n    .option('bump', {\n      description:\n        'Type of bump (major, minor or patch) or version number to publish the app',\n      type: 'string',\n      default: 'major',\n    })\n    .option('http', {\n      description: 'URL for where your app is served from e.g. localhost:1234',\n      default: null,\n    })\n    .option('http-served-from', {\n      description:\n        'Directory where your files is being served from e.g. ./dist',\n      default: null,\n    })\n    .option('app-init', {\n      description:\n        'Name of the function that will be called to initialize an app',\n      default: 'initialize',\n    })\n    .option('app-init-args', {\n      description: 'Arguments for calling the app init function',\n      array: true,\n      default: [],\n    })\n    .option('client-repo', {\n      description: 'Repo of Aragon client used to run your sandboxed app',\n      default: DEFAULT_CLIENT_REPO,\n    })\n    .option('client-version', {\n      description: 'Version of Aragon client used to run your sandboxed app',\n      default: DEFAULT_CLIENT_VERSION,\n    })\n    .option('client-port', {\n      description: 'Port being used by Aragon client',\n      default: DEFAULT_CLIENT_PORT,\n    })\n    .option('client-path', {\n      description: 'A path pointing to an existing Aragon client installation',\n      default: null,\n    })\n}\n\nexports.handler = function({\n  // Globals\n  reporter,\n  gasPrice,\n  cwd,\n  apm: apmOptions,\n  silent,\n  debug,\n  network,\n  module,\n  client,\n  files,\n  port,\n  networkId,\n  blockTime,\n  accounts,\n  reset,\n  kit,\n  kitInit,\n  kitDeployEvent,\n  template,\n  templateInit,\n  templateDeployEvent,\n  templateNewInstance,\n  templateArgs,\n  build,\n  buildScript,\n  publishDir,\n  prepublish,\n  prepublishScript,\n  bump,\n  http,\n  httpServedFrom,\n  appInit,\n  appInitArgs,\n  clientRepo,\n  clientVersion,\n  clientPort,\n  clientPath,\n}) {\n  apmOptions.ensRegistryAddress = apmOptions['ens-registry']\n\n  // TODO: this can be cleaned up once kits is no longer supported\n  template = kit || template\n  templateInit = kitInit || templateInit\n  templateDeployEvent = kitDeployEvent || templateDeployEvent\n\n  const showAccounts = accounts\n\n  const tasks = new TaskList(\n    [\n      {\n        title: 'Start a local Ethereum network',\n        skip: async ctx => {\n          const hostURL = new url.URL(network.provider.connection._url)\n          if (!(await isPortTaken(hostURL.port))) {\n            return false\n          } else {\n            ctx.web3 = new Web3(network.provider)\n            ctx.accounts = await ctx.web3.eth.getAccounts()\n            return 'Connected to the provided Ethereum network'\n          }\n        },\n        task: async (ctx, task) =>\n          devchain.task({ port, networkId, blockTime, reset, showAccounts }),\n      },\n      {\n        title: 'Check IPFS',\n        task: () => startIPFS.task({ apmOptions }),\n        enabled: () => !http || template,\n      },\n      {\n        title: 'Setup before publish',\n        task: async ctx => {\n          ctx.publishParams = {\n            provider: 'ipfs',\n            files,\n            ignore: ['node_modules'],\n            reporter,\n            gasPrice,\n            cwd,\n            network,\n            module,\n            buildScript,\n            build,\n            publishDir,\n            prepublishScript,\n            prepublish,\n            contract: deploy.arappContract(),\n            web3: ctx.web3,\n            apm: apmOptions,\n            bump,\n            http,\n            httpServedFrom,\n          }\n\n          return runSetupTask(ctx.publishParams)\n        },\n      },\n      {\n        title: 'Prepare for publish',\n        task: async ctx => {\n          return runPrepareForPublishTask({\n            ...ctx.publishParams,\n            // context\n            initialRepo: ctx.initialRepo,\n            initialVersion: ctx.initialVersion,\n            version: ctx.version,\n            contractAddress: ctx.contract,\n            deployArtifacts: ctx.deployArtifacts,\n          })\n        },\n      },\n      {\n        title: 'Publish app to aragonPM',\n        task: async ctx => {\n          const { dao, proxyAddress, methodName, params } = ctx.intent\n\n          return runPublishTask({\n            ...ctx.publishParams,\n            // context\n            dao,\n            proxyAddress,\n            methodName,\n            params,\n          })\n        },\n      },\n      {\n        title: 'Fetch published repo',\n        task: async ctx => {\n          // getRepoTask.task() return a function with ctx argument\n          await getRepoTask.task({\n            apmRepo: module.appName,\n            apm: APM(ctx.web3, apmOptions),\n            artifactRequired: false,\n          })(ctx)\n        },\n      },\n      {\n        title: 'Deploy Template',\n        enabled: () => template !== newDAO.BARE_TEMPLATE,\n        task: ctx => {\n          const deployParams = {\n            contract: template,\n            init: templateInit,\n            reporter,\n            gasPrice,\n            network,\n            cwd,\n            web3: ctx.web3,\n            apmOptions,\n          }\n\n          return deploy.task(deployParams)\n        },\n      },\n      {\n        title: 'Create DAO',\n        task: ctx => {\n          const roles = ctx.repo.roles || []\n          const rolesBytes = roles.map(role => role.bytes)\n\n          let fnArgs\n\n          if (ctx.contractInstance) {\n            // If template was deployed, use template args\n            fnArgs = templateArgs\n          } else {\n            // TODO: Report warning when app wasn't initialized\n            const initPayload = encodeInitPayload(\n              ctx.web3,\n              ctx.repo.abi,\n              appInit,\n              appInitArgs\n            )\n\n            if (initPayload === '0x') {\n              ctx.notInitialized = true\n            }\n\n            fnArgs = [ctx.repo.appId, rolesBytes, ctx.accounts[0], initPayload]\n          }\n\n          const newDAOParams = {\n            template,\n            templateVersion: 'latest',\n            templateInstance: ctx.contractInstance,\n            fn: templateNewInstance,\n            fnArgs,\n            deployEvent: templateDeployEvent,\n            gasPrice,\n            web3: ctx.web3,\n            reporter,\n            apmOptions,\n          }\n\n          return newDAO.task(newDAOParams)\n        },\n      },\n      {\n        title: 'Open DAO',\n        enabled: () => client === true,\n        task: async (ctx, task) =>\n          start.task({ clientRepo, clientVersion, clientPort, clientPath }),\n      },\n    ],\n    listrOpts(silent, debug)\n  )\n\n  const manifestPath = path.resolve(findProjectRoot(), 'manifest.json')\n  let manifest\n  if (fs.existsSync(manifestPath)) {\n    manifest = fs.readJsonSync(manifestPath)\n  }\n\n  return tasks.run({ ens: apmOptions['ens-registry'] }).then(async ctx => {\n    if (ctx.portOpen) {\n      reporter.warning(\n        `Server already listening at port ${chalk.blue(\n          clientPort\n        )}, skipped starting Aragon`\n      )\n    }\n\n    if (ctx.notInitialized) {\n      reporter.warning(\n        'App could not be initialized, check the --app-init flag. Functions protected behind the ACL will not work until the app is initialized'\n      )\n    }\n\n    if (files.length === 1 && path.normalize(files[0]) === '.') {\n      reporter.warning(\n        `Publishing files from the project's root folder is not recommended. Consider using the distribution folder of your project: \"--files <folder>\".`\n      )\n    }\n\n    reporter.newLine()\n\n    reporter.info(`You are now ready to open your app in Aragon.`)\n\n    reporter.newLine()\n\n    if (ctx.privateKeys) {\n      devchain.printAccounts(reporter, ctx.privateKeys)\n    }\n\n    if (ctx.mnemonic) {\n      devchain.printMnemonic(reporter, ctx.mnemonic)\n    }\n\n    devchain.printResetNotice(reporter, reset)\n\n    const registry = module.appName\n      .split('.')\n      .slice(1)\n      .join('.')\n\n    reporter.info(`This is the configuration for your development deployment:\n    ${'Ethereum Node'}: ${chalk.blue(network.provider.connection._url)}\n    ${'ENS registry'}: ${chalk.blue(ctx.ens)}\n    ${`aragonPM registry`}: ${chalk.blue(registry)}\n    ${'DAO address'}: ${chalk.green(ctx.daoAddress)}`)\n\n    reporter.newLine()\n\n    reporter.info(\n      `${\n        client !== false\n          ? `Opening ${chalk.bold(\n              `http://localhost:${clientPort}/#/${ctx.daoAddress}`\n            )} to view your DAO`\n          : `Use ${chalk.bold(\n              `\"aragon dao <command> ${ctx.daoAddress}\"`\n            )} to interact with your DAO`\n      }`\n    )\n\n    if (!manifest) {\n      reporter.warning('No front-end detected (no manifest.json)')\n    } else if (!manifest.start_url) {\n      reporter.warning('No front-end detected (no start_url defined)')\n    }\n\n    if (kit || kitInit || kitDeployEvent) {\n      reporter.warning(\n        `The use of kits is deprecated and templates should be used instead. The new options for 'aragon run' are '--template', '--template-init' and 'template-deploy-event'`\n      )\n    }\n  })\n}\n"],"file":"run.js"}