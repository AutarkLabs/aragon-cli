{"version":3,"sources":["../../src/commands/start.js"],"names":["chalk","require","TaskList","pkg","installDeps","DEFAULT_CLIENT_REPO","aragon","clientRepo","DEFAULT_CLIENT_VERSION","clientVersion","DEFAULT_CLIENT_PORT","clientPort","exports","command","describe","builder","yargs","positional","description","option","task","clientPath","tasks","title","skip","ctx","output","enabled","clientFetch","clientAvailable","handler","reporter","run","then","info","blue"],"mappings":";;;;;;;;;;AAAA;;;;;;AAOA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,QAAQ,GAAGD,OAAO,CAAC,OAAD,CAAxB;;AACA,IAAME,GAAG,GAAGF,OAAO,CAAC,oBAAD,CAAnB;;eACwBA,OAAO,CAAC,SAAD,C;IAAvBG,W,YAAAA,W;;AAER,IAAMC,mBAAmB,GAAGF,GAAG,CAACG,MAAJ,CAAWC,UAAvC;AACA,IAAMC,sBAAsB,GAAGL,GAAG,CAACG,MAAJ,CAAWG,aAA1C;AACA,IAAMC,mBAAmB,GAAGP,GAAG,CAACG,MAAJ,CAAWK,UAAvC;AAEAC,OAAO,CAACC,OAAR,GAAkB,wBAAlB;AAEAD,OAAO,CAACE,QAAR,GAAmB,iDAAnB;;AAEAF,OAAO,CAACG,OAAR,GAAkB,UAAAC,KAAK,EAAI;AACzB,SAAOA,KAAK,CACTC,UADI,CACO,aADP,EACsB;AACzBC,IAAAA,WAAW,EACT,yGAFuB;AAGzB,eAASb;AAHgB,GADtB,EAMJY,UANI,CAMO,gBANP,EAMyB;AAC5BC,IAAAA,WAAW,EACT,gGAF0B;AAG5B,eAASV;AAHmB,GANzB,EAWJW,MAXI,CAWG,aAXH,EAWkB;AACrBD,IAAAA,WAAW,EAAE,kCADQ;AAErB,eAASR;AAFY,GAXlB,EAeJS,MAfI,CAeG,aAfH,EAekB;AACrBD,IAAAA,WAAW,EAAE,2DADQ;AAErB,eAAS;AAFY,GAflB,CAAP;AAmBD,CApBD;;AAsBAN,OAAO,CAACQ,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AACbb,YAAAA,UADa,QACbA,UADa,EAEbE,aAFa,QAEbA,aAFa,EAGbE,UAHa,QAGbA,UAHa,EAIbU,UAJa,QAIbA,UAJa;AAMPC,YAAAA,KANO,GAMC,IAAIpB,QAAJ,CAAa,CACzB;AACEqB,cAAAA,KAAK,EAAE,6BADT;AAEEC,cAAAA,IAAI,EAAE;AAAA,uBAAM,CAAC,CAACH,UAAR;AAAA,eAFR;AAGED,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,iBAAOK,GAAP,EAAYL,KAAZ;AAAA;AAAA;AAAA;AAAA;AACJA,0BAAAA,KAAI,CAACM,MAAL,GAAc,oBAAd;AADI;AAAA,iCAEE,wBAAYD,GAAZ,EAAiBL,KAAjB,EAAuBZ,sBAAvB,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAHN;AAOEmB,cAAAA,OAAO,EAAE;AAAA,uBAAMlB,aAAa,KAAKD,sBAAxB;AAAA;AAPX,aADyB,EAUzB;AACEe,cAAAA,KAAK,EAAE,oBADT;AAEEC,cAAAA,IAAI,EAAE,cAAAC,GAAG;AAAA,uBAAI,CAAC,CAACJ,UAAN;AAAA,eAFX;AAGED,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,kBAAOK,GAAP,EAAYL,MAAZ;AAAA;AAAA;AAAA;AAAA;AACJA,0BAAAA,MAAI,CAACM,MAAL,GAAc,uBAAd;AADI;AAAA,iCAEE,2BAAe;AAAED,4BAAAA,GAAG,EAAHA,GAAF;AAAOL,4BAAAA,IAAI,EAAJA,MAAP;AAAab,4BAAAA,UAAU,EAAVA,UAAb;AAAyBE,4BAAAA,aAAa,EAAbA;AAAzB,2BAAf,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAHN;AAOEkB,cAAAA,OAAO,EAAE,iBAAAF,GAAG;AAAA,uBAAI,CAACA,GAAG,CAACG,WAAT;AAAA;AAPd,aAVyB,EAmBzB;AACEL,cAAAA,KAAK,EAAE,gCADT;AAEEH,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,kBAAOK,GAAP,EAAYL,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,4DAAqBhB,WAAW,CAACqB,GAAG,CAACJ,UAAL,EAAiBD,MAAjB,CAAhC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAFN;AAGEO,cAAAA,OAAO,EAAE,iBAAAF,GAAG;AAAA,uBAAI,CAACA,GAAG,CAACI,eAAL,IAAwB,CAACR,UAA7B;AAAA;AAHd,aAnByB,EAwBzB;AACEE,cAAAA,KAAK,EAAE,wBADT;AAEEH,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,kBAAOK,GAAP,EAAYL,MAAZ;AAAA;AAAA;AAAA;AAAA;AACJA,0BAAAA,MAAI,CAACM,MAAL,GAAc,2BAAd;AADI;AAAA,iCAEE,wBAAYD,GAAZ,EAAiBJ,UAAjB,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,iBAFN;AAMEM,cAAAA,OAAO,EAAE,iBAAAF,GAAG;AAAA,uBAAI,CAACA,GAAG,CAACI,eAAT;AAAA;AANd,aAxByB,EAgCzB;AACEN,cAAAA,KAAK,EAAE,wBADT;AAEEH,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,kBAAOK,GAAP,EAAYL,MAAZ;AAAA;AAAA;AAAA;AAAA;AACJA,0BAAAA,MAAI,CAACM,MAAL,GAAc,2BAAd;AADI;AAAA,iCAEE,wBAAYD,GAAZ,EAAiBd,UAAjB,EAA6BU,UAA7B,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFN,aAhCyB,EAuCzB;AACEE,cAAAA,KAAK,EAAE,gBADT;AAEEH,cAAAA,IAAI;AAAA;AAAA;AAAA,wCAAE,kBAAOK,GAAP,EAAYL,OAAZ;AAAA;AAAA;AAAA;AAAA;AACJA,0BAAAA,OAAI,CAACM,MAAL,GAAc,gBAAd;AADI;AAAA,iCAEE,uBAAWD,GAAX,EAAgBd,UAAhB,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAFN,aAvCyB,CAAb,CAND;AAAA,8CAqDNW,KArDM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAf;;AAAA;AAAA;AAAA;AAAA;;AAwDAV,OAAO,CAACkB,OAAR;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAChBC,YAAAA,QADgB,SAChBA,QADgB,EAEhBxB,UAFgB,SAEhBA,UAFgB,EAGhBE,aAHgB,SAGhBA,aAHgB,EAIhBE,UAJgB,SAIhBA,UAJgB,EAKhBU,UALgB,SAKhBA,UALgB;AAAA;AAAA,mBAOGT,OAAO,CAACQ,IAAR,CAAa;AAC9Bb,cAAAA,UAAU,EAAVA,UAD8B;AAE9BE,cAAAA,aAAa,EAAbA,aAF8B;AAG9BE,cAAAA,UAAU,EAAVA,UAH8B;AAI9BU,cAAAA,UAAU,EAAVA;AAJ8B,aAAb,CAPH;;AAAA;AAOVD,YAAAA,IAPU;AAAA,8CAaTA,IAAI,CACRY,GADI,GAEJC,IAFI,CAEC;AAAA,qBACJF,QAAQ,CAACG,IAAT,8BACwBlC,KAAK,CAACmC,IAAN,CAAW5B,UAAX,CADxB,sBAC0DP,KAAK,CAACmC,IAAN,CACtD1B,aADsD,CAD1D,8BAGuBT,KAAK,CAACmC,IAAN,CAAWxB,UAAX,CAHvB,EADI;AAAA,aAFD,CAbS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {\n  fetchClient,\n  downloadClient,\n  buildClient,\n  startClient,\n  openClient,\n} from '../lib/start'\nconst chalk = require('chalk')\nconst TaskList = require('listr')\nconst pkg = require('../../package.json')\nconst { installDeps } = require('../util')\n\nconst DEFAULT_CLIENT_REPO = pkg.aragon.clientRepo\nconst DEFAULT_CLIENT_VERSION = pkg.aragon.clientVersion\nconst DEFAULT_CLIENT_PORT = pkg.aragon.clientPort\n\nexports.command = 'start [client-version]'\n\nexports.describe = 'Start the Aragon GUI (graphical user interface)'\n\nexports.builder = yargs => {\n  return yargs\n    .positional('client-repo', {\n      description:\n        'Repo of Aragon client used to run your sandboxed app (valid git repository using https or ssh protocol)',\n      default: DEFAULT_CLIENT_REPO,\n    })\n    .positional('client-version', {\n      description:\n        'Version of Aragon client used to run your sandboxed app (commit hash, branch name or tag name)',\n      default: DEFAULT_CLIENT_VERSION,\n    })\n    .option('client-port', {\n      description: 'Port being used by Aragon client',\n      default: DEFAULT_CLIENT_PORT,\n    })\n    .option('client-path', {\n      description: 'A path pointing to an existing Aragon client installation',\n      default: null,\n    })\n}\n\nexports.task = async function({\n  clientRepo,\n  clientVersion,\n  clientPort,\n  clientPath,\n}) {\n  const tasks = new TaskList([\n    {\n      title: 'Fetching client from aragen',\n      skip: () => !!clientPath,\n      task: async (ctx, task) => {\n        task.output = 'Fetching client...'\n        await fetchClient(ctx, task, DEFAULT_CLIENT_VERSION)\n      },\n      enabled: () => clientVersion === DEFAULT_CLIENT_VERSION,\n    },\n    {\n      title: 'Downloading client',\n      skip: ctx => !!clientPath,\n      task: async (ctx, task) => {\n        task.output = 'Downloading client...'\n        await downloadClient({ ctx, task, clientRepo, clientVersion })\n      },\n      enabled: ctx => !ctx.clientFetch,\n    },\n    {\n      title: 'Installing client dependencies',\n      task: async (ctx, task) => installDeps(ctx.clientPath, task),\n      enabled: ctx => !ctx.clientAvailable && !clientPath,\n    },\n    {\n      title: 'Building Aragon client',\n      task: async (ctx, task) => {\n        task.output = 'Building Aragon client...'\n        await buildClient(ctx, clientPath)\n      },\n      enabled: ctx => !ctx.clientAvailable,\n    },\n    {\n      title: 'Starting Aragon client',\n      task: async (ctx, task) => {\n        task.output = 'Starting Aragon client...'\n        await startClient(ctx, clientPort, clientPath)\n      },\n    },\n    {\n      title: 'Opening client',\n      task: async (ctx, task) => {\n        task.output = 'Opening client'\n        await openClient(ctx, clientPort)\n      },\n    },\n  ])\n  return tasks\n}\n\nexports.handler = async ({\n  reporter,\n  clientRepo,\n  clientVersion,\n  clientPort,\n  clientPath,\n}) => {\n  const task = await exports.task({\n    clientRepo,\n    clientVersion,\n    clientPort,\n    clientPath,\n  })\n  return task\n    .run()\n    .then(() =>\n      reporter.info(\n        `Aragon client from ${chalk.blue(clientRepo)} version ${chalk.blue(\n          clientVersion\n        )} started on port ${chalk.blue(clientPort)}`\n      )\n    )\n}\n"],"file":"start.js"}