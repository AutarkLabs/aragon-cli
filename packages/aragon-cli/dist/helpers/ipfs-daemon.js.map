{"version":3,"sources":["../../src/helpers/ipfs-daemon.js"],"names":["execa","require","fs","path","os","ipfsAPI","getBinary","isPortTaken","ipfsBin","ensureIPFSInitialized","Error","existsSync","join","homedir","startIPFSDaemon","IPFS_START_TIMEOUT","startOutput","timeout","Promise","resolve","reject","setTimeout","start","ipfsProc","stdout","on","data","toString","includes","stderr","race","ipfsNode","IPFSCORS","key","value","isIPFSCORS","ipfsRpc","config","get","conf","allowOrigin","split","pop","allowMethods","map","setIPFSCORS","all","set","isIPFSRunning","port","portTaken","id","module","exports"],"mappings":"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","sourcesContent":["const execa = require('execa')\nconst fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst ipfsAPI = require('ipfs-api')\nconst { getBinary, isPortTaken } = require('../util')\n\nconst ipfsBin = getBinary('ipfs')\n\nconst ensureIPFSInitialized = async () => {\n  if (!ipfsBin) {\n    throw new Error(\n      'IPFS is not installed. Use `aragon ipfs install` before proceeding.'\n    )\n  }\n\n  if (!fs.existsSync(path.join(os.homedir(), '.ipfs'))) {\n    // We could use 'ipfs daemon --init' when https://github.com/ipfs/go-ipfs/issues/3913 is solved\n    await execa(ipfsBin, ['init'])\n  }\n}\n\nconst startIPFSDaemon = () => {\n  if (!ipfsBin) {\n    throw new Error(\n      'IPFS is not installed. Use `aragon ipfs install` before proceeding.'\n    )\n  }\n\n  const IPFS_START_TIMEOUT = 20000 // 20s for timeout, may need to be tweaked\n\n  let startOutput = ''\n\n  // We add a timeout as starting\n  const timeout = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(new Error(`Starting IPFS timed out:\\n${startOutput}`))\n    }, IPFS_START_TIMEOUT)\n  })\n\n  const start = new Promise(async (resolve, reject) => {\n    await ensureIPFSInitialized()\n    const ipfsProc = execa(ipfsBin, ['daemon', '--migrate'])\n\n    ipfsProc.stdout.on('data', data => {\n      startOutput = `${startOutput}${data.toString()}\\n`\n      if (data.toString().includes('Daemon is ready')) resolve()\n    })\n\n    ipfsProc.stderr.on('data', data => {\n      reject(new Error(`Starting IPFS failed: ${data.toString()}`))\n    })\n  })\n\n  return Promise.race([start, timeout])\n}\n\nlet ipfsNode\n\nconst IPFSCORS = [\n  {\n    key: 'API.HTTPHeaders.Access-Control-Allow-Origin',\n    value: ['*'],\n  },\n  {\n    key: 'API.HTTPHeaders.Access-Control-Allow-Methods',\n    value: ['PUT', 'GET', 'POST'],\n  },\n]\n\nconst isIPFSCORS = async ipfsRpc => {\n  if (!ipfsNode) ipfsNode = ipfsAPI(ipfsRpc)\n  const conf = await ipfsNode.config.get('API.HTTPHeaders')\n  const allowOrigin = IPFSCORS[0].key.split('.').pop()\n  const allowMethods = IPFSCORS[1].key.split('.').pop()\n  if (conf && conf[allowOrigin] && conf[allowMethods]) {\n    return true\n  } else {\n    throw new Error(`Please set the following flags in your IPFS node:\n    ${IPFSCORS.map(({ key, value }) => {\n      return `${key}: ${value}`\n    }).join('\\n    ')}`)\n  }\n}\n\nconst setIPFSCORS = ipfsRpc => {\n  if (!ipfsNode) ipfsNode = ipfsAPI(ipfsRpc)\n  return Promise.all(\n    IPFSCORS.map(({ key, value }) => ipfsNode.config.set(key, value))\n  )\n}\n\nconst isIPFSRunning = async ipfsRpc => {\n  const portTaken = await isPortTaken(ipfsRpc.port)\n\n  if (portTaken) {\n    if (!ipfsNode) ipfsNode = ipfsAPI(ipfsRpc)\n\n    try {\n      // if port is taken, attempt to fetch the node id\n      // if this errors, we can assume the port is taken\n      // by a process other then the ipfs gateway\n      await ipfsNode.id()\n      return true\n    } catch (e) {\n      return false\n    }\n  }\n\n  return false\n}\n\nmodule.exports = { startIPFSDaemon, isIPFSCORS, setIPFSCORS, isIPFSRunning }\n"],"file":"ipfs-daemon.js"}