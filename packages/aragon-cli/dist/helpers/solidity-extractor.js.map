{"version":3,"sources":["../../src/helpers/solidity-extractor.js"],"names":["fs","require","promisify","readFile","SOLIDITY_SHORTHAND_TYPES_MAP","address","bytes","uint","ufixed","fixed","bool","string","SOLIDITY_BASIC_TYPES","Object","keys","modifiesStateAndIsPublic","declaration","match","typeOrAddress","type","some","t","startsWith","expandTypeForSignature","getSignature","split","name","params","replace","map","param","filter","s","length","join","getNotice","notices","x","getRoles","auths","authStatement","module","exports","sourceCodePath","sourceCode","funcDecs","dec","sig","roles","notice"],"mappings":"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","sourcesContent":["const fs = require('fs')\nconst { promisify } = require('util')\nconst readFile = promisify(fs.readFile)\n\n// See https://solidity.readthedocs.io/en/v0.4.24/abi-spec.html#types\nconst SOLIDITY_SHORTHAND_TYPES_MAP = {\n  address: 'address',\n  bytes: 'bytes',\n  uint: 'uint256',\n  int: 'int256',\n  ufixed: 'ufixed128x18',\n  fixed: 'fixed128x18',\n  bool: 'bool',\n  string: 'string',\n}\nconst SOLIDITY_BASIC_TYPES = Object.keys(SOLIDITY_SHORTHAND_TYPES_MAP)\n\nconst modifiesStateAndIsPublic = declaration =>\n  !declaration.match(/\\b(internal|private|view|pure|constant)\\b/)\n\n// Check if the type starts with any of the basic types, otherwise it is probably\n// a typed contract, so we need to return address for the signature\nconst typeOrAddress = type => {\n  return SOLIDITY_BASIC_TYPES.some(t => type.startsWith(t)) ? type : 'address'\n}\n\n// Expand shorthands into their full types for calculating function signatures\nconst expandTypeForSignature = type => {\n  return SOLIDITY_SHORTHAND_TYPES_MAP[type] || type\n}\n\n// extracts function signature from function declaration\nconst getSignature = declaration => {\n  let [name, params] = declaration\n    .match(/^\\s*function ([^]*?)\\)/m)[1]\n    .split('(')\n\n  if (!name) {\n    return 'fallback'\n  }\n\n  if (params) {\n    // Has parameters\n    params = params\n      .replace(/\\n/gm, '')\n      .replace(/\\t/gm, '')\n      .split(',')\n      .map(param => param.split(' ').filter(s => s.length > 0)[0])\n      .map(type => typeOrAddress(type))\n      .map(type => expandTypeForSignature(type))\n      .join(',')\n  }\n\n  return `${name}(${params})`\n}\n\nconst getNotice = declaration => {\n  // capture from @notice to either next '* @' or end of comment '*/'\n  const notices = declaration.match(/(@notice)([^]*?)(\\* @|\\*\\/)/m)\n  if (!notices || notices.length === 0) return null\n\n  return notices[0]\n    .replace('*/', '')\n    .replace('* @', '')\n    .replace('@notice ', '')\n    .replace(/\\n/gm, '')\n    .replace(/\\t/gm, '')\n    .split(' ')\n    .filter(x => x.length > 0)\n    .join(' ')\n}\n\n// extracts required role from function declaration\nconst getRoles = declaration => {\n  const auths = declaration.match(/auth.?\\(([^]*?)\\)/gm)\n  if (!auths) return []\n\n  return auths.map(\n    authStatement =>\n      authStatement\n        .split('(')[1]\n        .split(',')[0]\n        .split(')')[0]\n  )\n}\n\n// Takes the path to a solidity file and extracts public function signatures,\n// its auth role if any and its notice statement\nmodule.exports = async sourceCodePath => {\n  const sourceCode = await readFile(sourceCodePath, 'utf8')\n\n  // everything between every 'function' and '{' and its @notice\n  const funcDecs = sourceCode.match(/(@notice|^\\s*function)(?:[^]*?){/gm)\n\n  if (!funcDecs) return []\n\n  return funcDecs\n    .filter(dec => modifiesStateAndIsPublic(dec))\n    .map(dec => ({\n      sig: getSignature(dec),\n      roles: getRoles(dec),\n      notice: getNotice(dec),\n    }))\n}\n"],"file":"solidity-extractor.js"}