{"version":3,"sources":["../../src/helpers/truffle-runner.js"],"names":["execa","require","devnull","getBinary","truffleBin","runTruffle","args","stdout","stderr","stdin","Promise","resolve","reject","truffle","errMsg","on","code","err","pipe","process","compileContracts","console","log","exit","module","exports"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;eACsBA,OAAO,CAAC,SAAD,C;IAArBE,S,YAAAA,S;;AAER,IAAMC,UAAU,GAAGD,SAAS,CAAC,SAAD,CAA5B;;AAEA,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,QAAqC;AAAA,MAA5BC,MAA4B,QAA5BA,MAA4B;AAAA,MAApBC,MAAoB,QAApBA,MAAoB;AAAA,MAAZC,KAAY,QAAZA,KAAY;AACtD,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,QAAMC,OAAO,GAAGb,KAAK,CAACI,UAAD,EAAaE,IAAb,CAArB;AACA,QAAIQ,MAAM,GAAG,EAAb;AACAD,IAAAA,OAAO,CAACE,EAAR,CAAW,MAAX,EAAmB,UAAAC,IAAI,EAAI;AACzBA,MAAAA,IAAI,KAAK,CAAT,GAAaL,OAAO,EAApB,GAAyBC,MAAM,CAACE,MAAD,CAA/B;AACD,KAFD,EAHsC,CAMtC;;AACAD,IAAAA,OAAO,CAACN,MAAR,CAAeQ,EAAf,CAAkB,MAAlB,EAA0B,UAAAE,GAAG,EAAI;AAC/BH,MAAAA,MAAM,IAAIG,GAAV;AACD,KAFD;AAGAJ,IAAAA,OAAO,CAACN,MAAR,CAAeW,IAAf,CAAoBX,MAAM,IAAIY,OAAO,CAACZ,MAAtC;AACAM,IAAAA,OAAO,CAACL,MAAR,CAAeU,IAAf,CAAoBV,MAAM,IAAIW,OAAO,CAACX,MAAtC;AACAW,IAAAA,OAAO,CAACV,KAAR,CAAcS,IAAd,CAAmBT,KAAK,IAAII,OAAO,CAACJ,KAApC;AACD,GAbM,CAAP;AAcD,CAfD;;AAiBA,IAAMW,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEff,UAAU,CAAC,CAAC,SAAD,CAAD,EAAc;AAAEE,cAAAA,MAAM,EAAEL,OAAO;AAAjB,aAAd,CAFK;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAIrBmB,YAAAA,OAAO,CAACC,GAAR;AACAH,YAAAA,OAAO,CAACI,IAAR,CAAa,CAAb;;AALqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBH,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AASAI,MAAM,CAACC,OAAP,GAAiB;AAAEpB,EAAAA,UAAU,EAAVA,UAAF;AAAce,EAAAA,gBAAgB,EAAhBA;AAAd,CAAjB","sourcesContent":["const execa = require('execa')\nconst devnull = require('dev-null')\nconst { getBinary } = require('../util')\n\nconst truffleBin = getBinary('truffle')\n\nconst runTruffle = (args, { stdout, stderr, stdin }) => {\n  return new Promise((resolve, reject) => {\n    const truffle = execa(truffleBin, args)\n    let errMsg = ''\n    truffle.on('exit', code => {\n      code === 0 ? resolve() : reject(errMsg)\n    })\n    // errMsg is only used if the process fails\n    truffle.stdout.on('data', err => {\n      errMsg += err\n    })\n    truffle.stdout.pipe(stdout || process.stdout)\n    truffle.stderr.pipe(stderr || process.stderr)\n    process.stdin.pipe(stdin || truffle.stdin)\n  })\n}\n\nconst compileContracts = async () => {\n  try {\n    await runTruffle(['compile'], { stdout: devnull() })\n  } catch (err) {\n    console.log(err)\n    process.exit(1)\n  }\n}\n\nmodule.exports = { runTruffle, compileContracts }\n"],"file":"truffle-runner.js"}