{"version":3,"sources":["../../../src/lib/ipfs/index.js"],"names":["FETCH_TIMEOUT","FETCH_TIMEOUT_ERR","ensureConnection","apiAddress","client","connectToAPI","id","Error","JSON","stringify","parseAddressAsURL","address","uri","url","URL","protocol","replace","host","hostname","port","parseInt","isDaemonRunning","portTaken","getMerkleDAG","cid","opts","parseMerkleDAG","object","get","merkleDAG","recursive","isDir","links","promises","map","link","Object","assign","Promise","all","then","dagNode","parsed","toJSON","data","length","toString","stringifyMerkleDAGNode","name","parsedSize","size","value","unit","delimiter","chalk","gray","join","stringifyMerkleDAG","node","extractCIDsFromMerkleDAG","CIDs","push","merkleDAGOfLink","CIDsOfLink","timeout","resolve","reject","setTimeout","gateways","queryCidAtGateway","gateway","race","success","error","propagateFile","logger","results","succeeded","filter","status","failed","errors","result","propagateFiles","reduce","prev","current","getDefaultRepoPath","homedirPath","getRepoVersion","repoLocation","versionFilePath","version","getRepoSize","err","humanReadableSize","getRepoConfig","configFilePath","config","getPortsConfig","repoConfig","api","Addresses","API","split","pop","Gateway","swarm","Swarm","getPeerIDConfig","Identity","PeerID"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport byteSize from 'byte-size'\nimport { stringifyTree } from 'stringify-tree'\nimport ipfsAPI from 'ipfs-http-client' // TODO: import only submodules?\nimport fetch from 'node-fetch'\nimport { readJson } from 'fs-extra'\nimport { join as joinPath } from 'path'\nimport { homedir } from 'os'\nimport { isPortTaken } from '../../util'\nimport getFolderSize from 'get-folder-size'\nimport url from 'url'\n\nconst FETCH_TIMEOUT = 20000 // 20s\nconst FETCH_TIMEOUT_ERR = 'Request timed out'\n\nexport async function ensureConnection(apiAddress) {\n  try {\n    const client = connectToAPI(apiAddress)\n    await client.id()\n    return {\n      client,\n    }\n  } catch (e) {\n    throw new Error(\n      `Could not connect to the IPFS API at ${JSON.stringify(apiAddress)}`\n    )\n  }\n}\n\nexport function connectToAPI(apiAddress) {\n  return ipfsAPI(apiAddress)\n}\n\nexport function parseAddressAsURL(address) {\n  const uri = new url.URL(address)\n  return {\n    protocol: uri.protocol.replace(':', ''),\n    host: uri.hostname,\n    port: parseInt(uri.port),\n  }\n}\n\n/**\n * Check whether the daemon is running by connecting to the API.\n *\n * @param {URL} apiAddress a `URL` object\n * @returns {boolean} true if it is running\n */\nexport async function isDaemonRunning(apiAddress) {\n  const portTaken = await isPortTaken(apiAddress.port)\n\n  if (!portTaken) {\n    return false\n  }\n\n  try {\n    // if port is taken, connect to the API,\n    // otherwise we can assume the port is taken by a different process\n    await ensureConnection(apiAddress)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport async function getMerkleDAG(client, cid, opts = {}) {\n  const merkleDAG = parseMerkleDAG(await client.object.get(cid))\n  merkleDAG.cid = cid\n\n  if (opts.recursive && merkleDAG.isDir && merkleDAG.links) {\n    // fetch the MerkleDAG of each link recursively\n    const promises = merkleDAG.links.map(async link => {\n      const object = await getMerkleDAG(client, link.cid, opts)\n      return Object.assign(link, object)\n    })\n\n    return Promise.all(promises).then(links => {\n      merkleDAG.links = links\n      return merkleDAG\n    })\n  }\n\n  return merkleDAG\n}\n\n// object.get returns an object of type DAGNode\n// https://github.com/ipld/js-ipld-dag-pb#dagnode-instance-methods-and-properties\nfunction parseMerkleDAG(dagNode) {\n  const parsed = dagNode.toJSON()\n  // add relevant data\n  parsed.isDir = isDir(parsed.data)\n  // remove irrelevant data\n  delete parsed.data\n  if (!parsed.isDir) {\n    // if it's a big file it will have links to its other chunks\n    delete parsed.links\n  }\n  return parsed\n}\n\nfunction isDir(data) {\n  return data.length === 2 && data.toString() === '\\u0008\\u0001'\n}\n\nfunction stringifyMerkleDAGNode(merkleDAG) {\n  // ${merkleDAG.isDir ? '📁' : ''}\n  const cid = merkleDAG.cid\n  const name = merkleDAG.name || 'root'\n  const parsedSize = byteSize(merkleDAG.size)\n  const size = parsedSize.value + parsedSize.unit\n  const delimiter = chalk.gray(' - ')\n\n  return [name, size, chalk.gray(cid)].join(delimiter)\n}\n\nexport function stringifyMerkleDAG(merkleDAG) {\n  return stringifyTree(\n    merkleDAG,\n    node => stringifyMerkleDAGNode(node),\n    node => node.links\n  )\n}\n\nexport function extractCIDsFromMerkleDAG(merkleDAG, opts = {}) {\n  const CIDs = []\n  CIDs.push(merkleDAG.cid)\n\n  if (opts.recursive && merkleDAG.isDir && merkleDAG.links) {\n    merkleDAG.links\n      .map(merkleDAGOfLink => extractCIDsFromMerkleDAG(merkleDAGOfLink, opts))\n      .map(CIDsOfLink => CIDs.push(...CIDsOfLink))\n  }\n\n  return CIDs\n}\n\nfunction timeout() {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(FETCH_TIMEOUT_ERR)\n    }, FETCH_TIMEOUT)\n  })\n}\n\nconst gateways = [\n  'https://ipfs.io/ipfs',\n  'https://ipfs.infura.io/ipfs',\n  'https://cloudflare-ipfs.com/ipfs',\n  'https://ipfs.eth.aragon.network/ipfs',\n  'https://ipfs.jes.xxx/ipfs',\n  'https://www.eternum.io/ipfs',\n  'https://ipfs.wa.hle.rs/ipfs',\n]\n\nasync function queryCidAtGateway(gateway, cid) {\n  try {\n    await Promise.race([\n      fetch(`${gateway}/${cid}`),\n      // Add a timeout because the Fetch API does not implement them\n      timeout(),\n    ])\n\n    return {\n      success: true,\n      cid,\n      gateway,\n    }\n  } catch (err) {\n    return {\n      success: false,\n      cid,\n      gateway,\n      error: err,\n    }\n  }\n}\n\nasync function propagateFile(cid, logger) {\n  const results = await Promise.all(\n    gateways.map(gateway => queryCidAtGateway(gateway, cid))\n  )\n\n  const succeeded = results.filter(status => status.success).length\n  const failed = gateways.length - succeeded\n\n  logger(\n    `Queried ${cid} at ${succeeded} gateways successfully, ${failed} failed.`\n  )\n\n  const errors = results\n    .filter(result => result.error)\n    .map(result => result.error)\n\n  return {\n    succeeded,\n    failed,\n    errors,\n  }\n}\n\nexport async function propagateFiles(CIDs, logger = () => {}) {\n  const results = await Promise.all(CIDs.map(cid => propagateFile(cid, logger)))\n  return {\n    gateways,\n    succeeded: results.reduce((prev, current) => prev + current.succeeded, 0),\n    failed: results.reduce((prev, current) => prev + current.failed, 0),\n    errors: results.reduce((prev, current) => [...prev, ...current.errors], []),\n  }\n}\n\nexport function getDefaultRepoPath() {\n  const homedirPath = homedir()\n  return joinPath(homedirPath, '.ipfs')\n}\n\nexport async function getRepoVersion(repoLocation) {\n  const versionFilePath = joinPath(repoLocation, 'version')\n  const version = await readJson(versionFilePath)\n  return version\n}\n\nexport async function getRepoSize(repoLocation) {\n  return new Promise((resolve, reject) => {\n    getFolderSize(repoLocation, (err, size) => {\n      if (err) {\n        reject(err)\n      } else {\n        const humanReadableSize = byteSize(size)\n        resolve(humanReadableSize)\n      }\n    })\n  })\n}\n\nexport async function getRepoConfig(repoLocation) {\n  const configFilePath = joinPath(repoLocation, 'config')\n  const config = await readJson(configFilePath)\n  return config\n}\n\nexport function getPortsConfig(repoConfig) {\n  return {\n    // default: \"/ip4/127.0.0.1/tcp/5001\"\n    api: repoConfig.Addresses.API.split('/').pop(),\n    // default: \"/ip4/127.0.0.1/tcp/8080\"\n    gateway: repoConfig.Addresses.Gateway.split('/').pop(),\n    // default: [\n    //   \"/ip4/0.0.0.0/tcp/4001\"\n    //   \"/ip6/::/tcp/4001\"\n    // ]\n    swarm: repoConfig.Addresses.Swarm[0].split('/').pop(),\n  }\n}\n\nexport function getPeerIDConfig(repoConfig) {\n  return repoConfig.Identity.PeerID\n}\n"],"file":"index.js"}