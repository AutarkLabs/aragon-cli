{"version":3,"sources":["../../src/middleware/module.js"],"names":["path","require","fs","findProjectRoot","module","exports","moduleMiddleware","argv","runsInCwd","modulePath","resolve","arapp","readJsonSync","Ajv","arappSchema","ajv","allErrors","validate","compile","valid","errors","errorsText","dataVar","reporter","error","process","exit","err"],"mappings":";;AAAA,IAAMA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AACA,IAAMC,EAAE,GAAGD,OAAO,CAAC,UAAD,CAAlB;;eAC4BA,OAAO,CAAC,SAAD,C;IAA3BE,e,YAAAA,e;;AAERC,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,IAA1B,EAAgC;AAC/C,MAAMC,SAAS,GAAGD,IAAI,CAAC,GAAD,CAAJ,KAAc,MAAhC;;AACA,MAAI,CAACC,SAAL,EAAgB;AACd,QAAI;AACF,UAAMC,UAAU,GAAGT,IAAI,CAACU,OAAL,CAAaP,eAAe,EAA5B,EAAgC,YAAhC,CAAnB;AACA,UAAMQ,KAAK,GAAGT,EAAE,CAACU,YAAH,CAAgBH,UAAhB,CAAd;;AAEA,UAAMI,GAAG,GAAGZ,OAAO,CAAC,KAAD,CAAnB;;AACA,UAAMa,WAAW,GAAGb,OAAO,CAAC,4BAAD,CAA3B;;AACA,UAAMc,GAAG,GAAG,IAAIF,GAAJ,CAAQ;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAAR,CAAZ;AACA,UAAMC,QAAQ,GAAGF,GAAG,CAACG,OAAJ,CAAYJ,WAAZ,CAAjB;AACA,UAAMK,KAAK,GAAGF,QAAQ,CAACN,KAAD,CAAtB;;AAEA,UAAI,CAACQ,KAAL,EAAY;AACV,YAAMC,MAAM,GAAGL,GAAG,CAACM,UAAJ,CAAeJ,QAAQ,CAACG,MAAxB,EAAgC;AAC7CE,UAAAA,OAAO,EAAE;AADoC,SAAhC,CAAf;AAGAf,QAAAA,IAAI,CAACgB,QAAL,CAAcC,KAAd,iDAA6DJ,MAA7D;AACAK,QAAAA,OAAO,CAACC,IAAR,CAAa,CAAb;AACD,OAhBC,CAkBF;AACA;AACA;AACA;;;AACAnB,MAAAA,IAAI,CAACH,MAAL,GAAcO,KAAd;AACD,KAvBD,CAuBE,OAAOgB,GAAP,EAAY,CACZ;AACD;AACF;;AAED,SAAO,EAAP;AACD,CAhCD","sourcesContent":["const path = require('path')\nconst fs = require('fs-extra')\nconst { findProjectRoot } = require('../util')\n\nmodule.exports = function moduleMiddleware(argv) {\n  const runsInCwd = argv['_'] === 'init'\n  if (!runsInCwd) {\n    try {\n      const modulePath = path.resolve(findProjectRoot(), 'arapp.json')\n      const arapp = fs.readJsonSync(modulePath)\n\n      const Ajv = require('ajv')\n      const arappSchema = require('../../schemas/arapp.schema')\n      const ajv = new Ajv({ allErrors: true })\n      const validate = ajv.compile(arappSchema)\n      const valid = validate(arapp)\n\n      if (!valid) {\n        const errors = ajv.errorsText(validate.errors, {\n          dataVar: 'arapp',\n        })\n        argv.reporter.error(`Error parsing the aragon config file: ${errors}!`)\n        process.exit(1)\n      }\n\n      // hack: we need to access the module in downstream middleware (environmentMiddleware), but\n      // yargs does not update the `argv` param until all middleware have\n      // ran, so we directly mutate the `argv` param\n      // https://github.com/yargs/yargs/issues/1232\n      argv.module = arapp\n    } catch (err) {\n      // argv.reporter.debug(err)\n    }\n  }\n\n  return {}\n}\n"],"file":"module.js"}