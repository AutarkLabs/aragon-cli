{"version":3,"sources":["../src/util.js"],"names":["findUp","require","path","execa","net","fs","readJson","which","cachedProjectRoot","PGK_MANAGER_BIN_NPM","debugLogger","process","env","DEBUG","console","log","ZERO_ADDRESS","findProjectRoot","dirname","sync","_","Error","isPortTaken","port","opts","Object","assign","timeout","Promise","resolve","socket","Socket","onError","destroy","setTimeout","on","connect","host","end","getNodePackageManager","installDeps","cwd","task","bin","installTask","stdout","output","err","message","stderr","getBinary","binaryName","binaryPath","getLocalBinary","getGlobalBinary","projectRoot","join","__dirname","existsSync","runScriptTask","scriptName","skip","packageJson","scripts","scriptTask","getContract","pkg","contract","artifact","ANY_ENTITY","NO_MANAGER","DEFAULT_GAS_FUZZ_FACTOR","LAST_BLOCK_GAS_LIMIT_FACTOR","getRecommendedGasLimit","web3","estimatedGas","gasFuzzFactor","eth","getBlock","latestBlock","blockGasLimit","gasLimit","upperGasLimit","Math","round","bufferedGasLimit","parseAsBoolean","target","lowercase","toLowerCase","parseAsArray","json","JSON","parse","Array","isArray","parseArgumentStringIfPossible","e","isValidAragonId","aragonId","test","module","exports"],"mappings":"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","sourcesContent":["const findUp = require('find-up')\nconst path = require('path')\nconst execa = require('execa')\nconst net = require('net')\nconst fs = require('fs')\nconst { readJson } = require('fs-extra')\nconst which = require('which')\n\nlet cachedProjectRoot\n\nconst PGK_MANAGER_BIN_NPM = 'npm'\nconst debugLogger = process.env.DEBUG ? console.log : () => {}\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nconst findProjectRoot = () => {\n  if (!cachedProjectRoot) {\n    try {\n      cachedProjectRoot = path.dirname(findUp.sync('arapp.json'))\n    } catch (_) {\n      throw new Error('This directory is not an Aragon project')\n      // process.exit(1)\n    }\n  }\n  return cachedProjectRoot\n}\n\nconst isPortTaken = async (port, opts) => {\n  opts = Object.assign({ timeout: 1000 }, opts)\n\n  return new Promise(resolve => {\n    const socket = new net.Socket()\n\n    const onError = () => {\n      socket.destroy()\n      resolve(false)\n    }\n\n    socket.setTimeout(opts.timeout)\n    socket.on('error', onError)\n    socket.on('timeout', onError)\n\n    socket.connect(port, opts.host, () => {\n      socket.end()\n      resolve(true)\n    })\n  })\n}\n\nconst getNodePackageManager = () => {\n  return PGK_MANAGER_BIN_NPM\n}\n\nconst installDeps = (cwd, task) => {\n  const bin = getNodePackageManager()\n  const installTask = execa(bin, ['install'], { cwd })\n  installTask.stdout.on('data', log => {\n    if (!log) return\n    task.output = log\n  })\n\n  return installTask.catch(err => {\n    throw new Error(\n      `${err.message}\\n${err.stderr}\\n\\nFailed to install dependencies. See above output.`\n    )\n  })\n}\n\n/**\n * Attempts to find the binary path locally and then globally.\n *\n * @param {string} binaryName e.g.: `ipfs`\n * @returns {string} the path to the binary, `null` if unsuccessful\n */\nconst getBinary = binaryName => {\n  let binaryPath = getLocalBinary(binaryName)\n\n  if (binaryPath === null) {\n    binaryPath = getGlobalBinary(binaryName)\n  }\n\n  if (binaryPath === null) {\n    debugLogger(`Cannot find binary ${binaryName}.`)\n  } else {\n    debugLogger(`Found binary ${binaryName} at ${binaryPath}.`)\n  }\n\n  return binaryPath\n}\n\nconst getLocalBinary = (binaryName, projectRoot) => {\n  if (!projectRoot) {\n    // __dirname evaluates to the directory of this file (util.js)\n    // e.g.: `../dist/` or `../src/`\n    projectRoot = path.join(__dirname, '..')\n  }\n\n  // check local node_modules\n  let binaryPath = path.join(projectRoot, 'node_modules', '.bin', binaryName)\n\n  debugLogger(`Searching binary ${binaryName} at ${binaryPath}`)\n  if (fs.existsSync(binaryPath)) {\n    return binaryPath\n  }\n\n  // check parent node_modules\n  binaryPath = path.join(projectRoot, '..', '.bin', binaryName)\n\n  debugLogger(`Searching binary ${binaryName} at ${binaryPath}.`)\n  if (fs.existsSync(binaryPath)) {\n    return binaryPath\n  }\n\n  // check parent node_modules if this module is scoped (e.g.: @scope/package)\n  binaryPath = path.join(projectRoot, '..', '..', '.bin', binaryName)\n\n  debugLogger(`Searching binary ${binaryName} at ${binaryPath}.`)\n  if (fs.existsSync(binaryPath)) {\n    return binaryPath\n  }\n\n  return null\n}\n\nconst getGlobalBinary = binaryName => {\n  debugLogger(`Searching binary ${binaryName} in the global PATH variable.`)\n\n  try {\n    return which.sync(binaryName)\n  } catch {\n    return null\n  }\n}\n\n// TODO: Add a cwd paramter\nconst runScriptTask = async (task, scriptName) => {\n  if (!fs.existsSync('package.json')) {\n    task.skip('No package.json found')\n    return\n  }\n\n  const packageJson = await readJson('package.json')\n  const scripts = packageJson.scripts || {}\n  if (!scripts[scriptName]) {\n    task.skip('Build script not defined in package.json')\n    return\n  }\n\n  const bin = getNodePackageManager()\n  const scriptTask = execa(bin, ['run', scriptName])\n\n  scriptTask.stdout.on('data', log => {\n    if (!log) return\n    task.output = `npm run ${scriptName}: ${log}`\n  })\n\n  return scriptTask.catch(err => {\n    throw new Error(\n      `${err.message}\\n${err.stderr}\\n\\nFailed to build. See above output.`\n    )\n  })\n}\n\nconst getContract = (pkg, contract) => {\n  const artifact = require(`${pkg}/build/contracts/${contract}.json`)\n  return artifact\n}\n\nconst ANY_ENTITY = '0xffffffffffffffffffffffffffffffffffffffff'\nconst NO_MANAGER = '0x0000000000000000000000000000000000000000'\nconst DEFAULT_GAS_FUZZ_FACTOR = 1.5\nconst LAST_BLOCK_GAS_LIMIT_FACTOR = 0.95\n\n/**\n *\n * Calculate the recommended gas limit\n *\n * @param {*} web3 eth provider to get the last block gas limit\n * @param {number} estimatedGas estimated gas\n * @param {number} gasFuzzFactor defaults to 1.5\n * @returns {number} gasLimit\n */\nconst getRecommendedGasLimit = async (\n  web3,\n  estimatedGas,\n  gasFuzzFactor = DEFAULT_GAS_FUZZ_FACTOR\n) => {\n  // TODO print these values if --debug is passed\n  const latestBlock = await web3.eth.getBlock('latest')\n  const blockGasLimit = latestBlock.gasLimit\n\n  const upperGasLimit = Math.round(blockGasLimit * LAST_BLOCK_GAS_LIMIT_FACTOR)\n  if (estimatedGas > upperGasLimit) return estimatedGas // TODO print a warning?\n\n  const bufferedGasLimit = Math.round(estimatedGas * gasFuzzFactor)\n\n  if (bufferedGasLimit < upperGasLimit) return bufferedGasLimit\n  return upperGasLimit\n}\n\n/**\n * Parse a String to Boolean, or throw an error.\n *\n * The check is **case insensitive**! (Passing `\"TRue\"` will return `true`)\n *\n * @param {string} target must be a string\n * @returns {boolean} the parsed value\n */\nconst parseAsBoolean = target => {\n  if (typeof target !== 'string') {\n    throw new Error(\n      `Expected ${target} to be of type string, not ${typeof target}`\n    )\n  }\n\n  const lowercase = target.toLowerCase()\n\n  if (lowercase === 'true') {\n    return true\n  }\n\n  if (lowercase === 'false') {\n    return false\n  }\n\n  throw new Error(`Cannot parse ${target} as boolean`)\n}\n\n/**\n * Parse a String to Array, or throw an error.\n *\n * @param {string} target must be a string\n * @returns {Array} the parsed value\n */\nconst parseAsArray = target => {\n  if (typeof target !== 'string') {\n    throw new Error(\n      `Expected ${target} to be of type string, not ${typeof target}`\n    )\n  }\n\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n  const json = JSON.parse(target)\n\n  if (Array.isArray(json)) {\n    return json\n  }\n\n  throw new Error(`Cannot parse ${target} as array`)\n}\n\n/**\n * Parse a String to Boolean or Array, or throw an error.\n *\n * @param {string} target must be a string\n * @returns {boolean|Array} the parsed value\n */\nconst parseArgumentStringIfPossible = target => {\n  // convert to boolean: 'false' to false\n  try {\n    return parseAsBoolean(target)\n  } catch (e) {}\n\n  // convert to array: '[\"hello\", 1, \"true\"]' to [\"hello\", 1, \"true\"]\n  // TODO convert children as well ??\n  try {\n    return parseAsArray(target)\n  } catch (e) {}\n\n  // nothing to parse\n  return target\n}\n\n/**\n * Validates an Aragon Id\n * @param {string} aragonId Aragon Id\n * @returns {boolean} `true` if valid\n */\nfunction isValidAragonId(aragonId) {\n  return /^[a-z0-9-]+$/.test(aragonId)\n}\n\nmodule.exports = {\n  parseArgumentStringIfPossible,\n  debugLogger,\n  findProjectRoot,\n  isPortTaken,\n  installDeps,\n  runScriptTask,\n  getNodePackageManager,\n  getBinary,\n  getLocalBinary,\n  getGlobalBinary,\n  getContract,\n  isValidAragonId,\n  ANY_ENTITY,\n  NO_MANAGER,\n  ZERO_ADDRESS,\n  getRecommendedGasLimit,\n}\n"],"file":"util.js"}