{"version":3,"sources":["../../src/reporters/ConsoleReporter.js"],"names":["chalk","require","figures","ICON_MAP","debug","color","symbol","info","warning","error","success","getIcon","name","module","exports","opts","silent","category","icon","messages","console","log","global","DEBUG_MODE","message"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,IAAMC,OAAO,GAAGD,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAME,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAE;AACLC,IAAAA,KAAK,EAAE,SADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GADQ;AAKfC,EAAAA,IAAI,EAAE;AACJF,IAAAA,KAAK,EAAE,MADH;AAEJC,IAAAA,MAAM,EAAE;AAFJ,GALS;AASfE,EAAAA,OAAO,EAAE;AACPH,IAAAA,KAAK,EAAE,QADA;AAEPC,IAAAA,MAAM,EAAE;AAFD,GATM;AAafG,EAAAA,KAAK,EAAE;AACLJ,IAAAA,KAAK,EAAE,KADF;AAELC,IAAAA,MAAM,EAAE;AAFH,GAbQ;AAiBfI,EAAAA,OAAO,EAAE;AACPL,IAAAA,KAAK,EAAE,OADA;AAEPC,IAAAA,MAAM,EAAE;AAFD;AAjBM,CAAjB;;AAuBA,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI,EAAI;AAAA,uBACIT,QAAQ,CAACS,IAAD,CADZ;AAAA,MACdP,KADc,kBACdA,KADc;AAAA,MACPC,MADO,kBACPA,MADO;AAEtB,SAAON,KAAK,CAACK,KAAD,CAAL,CAAaH,OAAO,CAACI,MAAD,CAApB,CAAP;AACD,CAHD;;AAKAO,MAAM,CAACC,OAAP;AAAA;AAAA;AACE,6BAAsC;AAAA,QAA1BC,IAA0B,uEAAnB;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAmB;;AAAA;;AACpC,SAAKA,MAAL,GAAcD,IAAI,CAACC,MAAnB;AACD;;AAHH;AAAA;AAAA,8BAK0C;AAAA;;AAAA,UAAhCC,QAAgC,uEAArB,MAAqB;AACtC,UAAI,KAAKD,MAAT,EAAiB;AAEjB,UAAME,IAAI,GAAGP,OAAO,CAACM,QAAD,CAApB;;AAHsC,wCAAVE,QAAU;AAAVA,QAAAA,QAAU;AAAA;;AAKtC,kBAAAC,OAAO,EAACC,GAAR,kBAAYH,IAAZ,SAAqBC,QAArB;AACD;AAXH;AAAA;AAAA,4BAaqB;AAAA,yCAAVA,QAAU;AAAVA,QAAAA,QAAU;AAAA;;AACjB,UAAIG,MAAM,CAACC,UAAX,EAAuB,KAAKC,OAAL,cAAa,OAAb,SAAyBL,QAAzB;AACxB;AAfH;AAAA;AAAA,2BAiBoB;AAAA,yCAAVA,QAAU;AAAVA,QAAAA,QAAU;AAAA;;AAChB,WAAKK,OAAL,cAAa,MAAb,SAAwBL,QAAxB;AACD;AAnBH;AAAA;AAAA,8BAqBuB;AAAA,yCAAVA,QAAU;AAAVA,QAAAA,QAAU;AAAA;;AACnB,WAAKK,OAAL,cAAa,SAAb,SAA2BL,QAA3B;AACD;AAvBH;AAAA;AAAA,4BAyBqB;AAAA,yCAAVA,QAAU;AAAVA,QAAAA,QAAU;AAAA;;AACjB,WAAKK,OAAL,cAAa,OAAb,SAAyBL,QAAzB;AACD;AA3BH;AAAA;AAAA,8BA6BuB;AAAA,yCAAVA,QAAU;AAAVA,QAAAA,QAAU;AAAA;;AACnB,WAAKK,OAAL,cAAa,SAAb,SAA2BL,QAA3B;AACD;AA/BH;AAAA;AAAA,8BAiCY;AACRC,MAAAA,OAAO,CAACC,GAAR;AACD;AAnCH;;AAAA;AAAA","sourcesContent":["const chalk = require('chalk')\nconst figures = require('figures')\n\nconst ICON_MAP = {\n  debug: {\n    color: 'magenta',\n    symbol: 'pointer',\n  },\n  info: {\n    color: 'blue',\n    symbol: 'info',\n  },\n  warning: {\n    color: 'yellow',\n    symbol: 'warning',\n  },\n  error: {\n    color: 'red',\n    symbol: 'cross',\n  },\n  success: {\n    color: 'green',\n    symbol: 'tick',\n  },\n}\n\nconst getIcon = name => {\n  const { color, symbol } = ICON_MAP[name]\n  return chalk[color](figures[symbol])\n}\n\nmodule.exports = class ConsoleReporter {\n  constructor(opts = { silent: false }) {\n    this.silent = opts.silent\n  }\n\n  message(category = 'info', ...messages) {\n    if (this.silent) return\n\n    const icon = getIcon(category)\n\n    console.log(icon, ...messages)\n  }\n\n  debug(...messages) {\n    if (global.DEBUG_MODE) this.message('debug', ...messages)\n  }\n\n  info(...messages) {\n    this.message('info', ...messages)\n  }\n\n  warning(...messages) {\n    this.message('warning', ...messages)\n  }\n\n  error(...messages) {\n    this.message('error', ...messages)\n  }\n\n  success(...messages) {\n    this.message('success', ...messages)\n  }\n\n  newLine() {\n    console.log()\n  }\n}\n"],"file":"ConsoleReporter.js"}